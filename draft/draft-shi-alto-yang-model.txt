



ALTO Working Group                                                X. Shi
Internet-Draft                                                   Y. Yang
Intended status: Informational                           Yale University
Expires: May 14, 2015                                          M. Scharf
                                                Alcatel-Lucent Bell Labs
                                                       November 10, 2014


           A YANG Data Model for Base ALTO Data and Services
                      draft-shi-alto-yang-model-01

Abstract

   The Application-Layer Traffic Optimization (ALTO) protocol [RFC7285]
   defines a set of network information services, including the network
   map service, the cost map service, the filtered map services, the
   endpoint property service, and the endpoint cost service.  A meta
   service, called the information resource directory (IRD) service,
   allows an ALTO server to provide ALTO clients with meta information
   (e.g., the access URI) about each information resource and service it
   provides.  The ALTO protocol [RFC7285] uses a RESTful design and
   encodes client request parameters and server responses using JSON
   encoding [RFC7159].  One may consider that most of these services are
   based on data maintained at an ALTO server.  Hence, in this document,
   we explore how one may use the data modeling language YANG [RFC6020]
   to specify the services defined in the ALTO protocol [RFC7285].  We
   first define two YANG models for RPC specification and data instance
   description of of ALTO services.  We then discuss the "standard
   operations" defined in NETCONF/RESTCONF to evaluate potential
   integration.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on May 14, 2015.




Shi, et al.               Expires May 14, 2015                  [Page 1]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


Copyright Notice

   Copyright (c) 2014 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Design and Structure Overview of ALTO/YANG  . . . . . . . . .   4
     2.1.  Overview  . . . . . . . . . . . . . . . . . . . . . . . .   4
     2.2.  ALTO/YANG RPC Specification . . . . . . . . . . . . . . .   5
     2.3.  ALTO/YANG Data Instance Description . . . . . . . . . . .   8
     2.4.  ALTO/YANG with Integration with NETCONF . . . . . . . . .  10
       2.4.1.  Tree Diagram for ALTO/YANG with NETCONF . . . . . . .  11
       2.4.2.  Full Network Map Service using NETCONF  . . . . . . .  13
       2.4.3.  Full Cost Map Service using NETCONF . . . . . . . . .  17
       2.4.4.  Filtered Network Map Service using NETCONF  . . . . .  23
       2.4.5.  Filtered Cost Map Service using NETCONF . . . . . . .  28
       2.4.6.  Endpoint Property Service in NETCONF  . . . . . . . .  35
       2.4.7.  Other Services and Discussions  . . . . . . . . . . .  41
     2.5.  ALTO/YANG with Integration with RESTCONF  . . . . . . . .  42
       2.5.1.  Tree Diagram for ALTO/YANG with RESTCONF  . . . . . .  43
       2.5.2.  Full Network Map Service Using RESTCONF . . . . . . .  46
       2.5.3.  Full Cost Map Service Using RESTCONF  . . . . . . . .  48
       2.5.4.  Impossibility to Encode Filtered Maps and Endpoint
               Properties using Standard RESTCONF Query  . . . . . .  50
       2.5.5.  A Potential Extension to RESTCONF to Handle Filtered
               Maps and Endpoint Properties Services . . . . . . . .  50
       2.5.6.  Other Services and Discussions  . . . . . . . . . . .  57
   3.  Non-Trivial Specification Efforts . . . . . . . . . . . . . .  57
     3.1.  YANG Expressiveness Issues  . . . . . . . . . . . . . . .  57
       3.1.1.  Limitation on Modeling JSON key-value store . . . . .  57
       3.1.2.  Limits of Leafrefs  . . . . . . . . . . . . . . . . .  60
     3.2.  Extensibility Issues  . . . . . . . . . . . . . . . . . .  60
       3.2.1.  String Pattern Extensibility  . . . . . . . . . . . .  60
       3.2.2.  Type Extensibility  . . . . . . . . . . . . . . . . .  60
   4.  Applications of ALTO/YANG . . . . . . . . . . . . . . . . . .  60
     4.1.  Other Applications  . . . . . . . . . . . . . . . . . . .  60



Shi, et al.               Expires May 14, 2015                  [Page 2]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


       4.1.1.  Verifier/Validator on the Client Side . . . . . . . .  60
       4.1.2.  Code Generator  . . . . . . . . . . . . . . . . . . .  60
   5.  Security Considerations . . . . . . . . . . . . . . . . . . .  61
   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  61
   7.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  61
   Appendix A.  YANG Data Model for ALTO Protocol  . . . . . . . . .  62
     A.1.  ALTO/YANG: Common Data Types  . . . . . . . . . . . . . .  62
     A.2.  ALTO/YANG: RPC Only . . . . . . . . . . . . . . . . . . .  76
     A.3.  ALTO/YANG: Data Instances Description . . . . . . . . . .  81
     A.4.  ALTO/YANG: NETCONF  . . . . . . . . . . . . . . . . . . .  84
     A.5.  ALTO/YANG: RESTCONF . . . . . . . . . . . . . . . . . . .  86
   Appendix B.  YANG-Validated JSON Messages for ALTO Examples . . .  89
     B.1.  IRD Response Example  . . . . . . . . . . . . . . . . . .  90
     B.2.  Network Map Service Response Example  . . . . . . . . . .  93
     B.3.  Filtered Cost Map Response Example  . . . . . . . . . . .  95
     B.4.  Endpoint Property Service Response Example  . . . . . . .  97
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  99

1.  Introduction

   This document explores how one may use the data modeling language
   YANG [RFC6020] to specify the network information services defined in
   the Application-Layer Traffic Optimization (ALTO) protocol [RFC7285].
   In particular, this work is motivated by the recent substantial
   interest in the networking community to use YANG in networking
   protocol specification and development.  This interest is highly
   justified, given that the potential benefits of using a formal
   specification can be multifold, including both precision and the
   potential of automation.  However, at the same time, data modeling
   languages are generally domain specific languages (DSL) and hence are
   restricted by their specific domains.  For example, YANG is developed
   in the specific domain of modeling configuration and state data
   stored at network devices.  ALTO information does not fit in this
   domain but is highly related: ALTO information should be derived from
   network configuration and state data.  Hence, modeling ALTO using
   YANG provides an interesting exercise on how one may apply YANG
   slightly outside its original domain.

   The initial goal of this document was to produce an ALTO
   specification using YANG so that the YANG specification of ALTO,
   which we refer to as ALTO/YANG, and the original specification
   [RFC7285] can inter-operate.  We refer to an interop specification as
   a syntactically equivalent specification.  In other words, the ALTO/
   YANG specification produces the same behavior as that of the original
   specification.  Unfortunately, as we have shown in
   [draft-shi-alto-yang-json], even without the need to consider other
   components such as NETCONF/RESTCONF to construct a complete YANG
   system, the basic encoding rule of YANG already makes syntactic



Shi, et al.               Expires May 14, 2015                  [Page 3]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   equivalence unfeasible.  In particular, [RFC7285] makes extensive use
   of the common key-value store abstraction in its JSON object
   encoding.  But such encoding cannot be generated using the existing
   YANG/JSON encoding [draft-ietf-netmod-yang-json].  As a result, the
   focus of this document is on using YANG to define semantically
   equivalent ALTO services.  We still strive that the syntax generated
   by ALTO/YANG is close to that of [RFC7285].

   The rest of this document is organized as follows.  In
   Section Section 2, we provide an overview of our design approaches.
   We discuss three specification approaches, considering the three use
   cases of YANG.  In Section 3, we discuss more detailed specification
   issues that we have encountered.  The detailed specification of ALTO/
   YANG is in Appendix A.

2.  Design and Structure Overview of ALTO/YANG

2.1.  Overview

   Our design tries to use YANG in three aspects: (1) RPC specification,
   (2) data instance description, and (3) standard operations.  These
   three aspects are not mutually exclusive of each other, but assume
   different levels of matching and use of YANG.

   The RPC specification aspect allows precise specification and
   automation of RPC input/output message encoding as well as data
   serialization and deserialization.  This aspect of using YANG is
   minimal and the simplest.  The YANG model only provides a mapping of
   the The protocol to be specified does not need to match the
   operational model of YANG.  In Section Section 2.2, we specify a YANG
   model named alto-service-rpc that uses YANG only in this aspect.

   The data instance description and standard operations aspects are
   analogous to databases.  In relational database, one uses SQL to
   describe the data schema (e.g., in CREATE TABLE).  We refer to this
   process of modeling the data as the data instance description aspect.
   Modeling the data in YANG does not guarantee full compatibility with
   the operational model of the existing protocol.  In particular, the
   data instances specified in a YANG model may be virtual in a protocol
   design.  In Section Section 2.3, we specify a YANG model named alto-
   service-did that uses YANG to specify potential ALTO base data
   instances to implement certain services.

   SQL also defines statements such as SELECT, INSERT, UPDATE, and
   DELETE.  With a DBMS implementing SQL, when a user has a new set of
   data to be managed, the user describes the new data schema.  The
   existing statements are already available to retrieve and manipulate
   the data.  This substantially reduce the efforts to introduce and



Shi, et al.               Expires May 14, 2015                  [Page 4]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   manage a new set of data.  We refer to this as the standard
   operations aspect.  In YANG related efforts, NETCONF and RESTCONF
   each tries to provide some of these standard operations (e.g.,
   RESTCONF query).  To utilize this aspect, the YANG specification need
   to be "embedded" in the chosen specification (e.g., NETCONF).  In
   Sections Section 2.4 and Section 2.5, we discuss specification by
   considering that the YANG model has the support of "standard
   operations" defined in NETCONF and RESTCONF.

   Some of the common type definitions and groupings for ALTO/YANG are
   defined in Appendix A.1.

2.2.  ALTO/YANG RPC Specification

   A simple way of using the YANG data modeling language is to specify
   the input/output protocol message.  YANG is XML based, but can have
   an equivalent JSON encoding following [draft-ietf-netmod-yang-json].
   For ALTO protocol messages, we focus on the JSON objects in the body
   of ALTO requests and responses, but not the HTTP headers.  Once we
   specify a YANG model with rpc input and output for the protocol
   messages, we can use YANG related tools to do YANG instance
   validation for both XML and JSON encoding.

   One caveat is that not all JSON protocol messages can be modeled by
   YANG. [draft-shi-alto-yang-json] has provided detailed conditions for
   a JSON message to have a compact YANG model.  The model below is not
   syntactically equivalent to the ALTO protocol, i.e., they cannot
   interop.  The goal is to model the ALTO message as close to the
   [RFC7285] definitions as possible.

   Figure 1 gives the tree diagram of the YANG model alto-service-rpc
   (Appendix A.2) to specify ALTO service message encoding.  As it is
   clear from the specification, it has only RPCs.  The supporting
   typedef's and groupings are defined in YANG module alto-service-types
   (Appendix A.1, which is not shown in the following tree diagram.

   module: alto-service-rpc
   rpcs:
      +---x IRD-service
      |  +--ro output
      |     +--ro IRD-service
      |        +--ro meta
      |        |  +--ro cost-types* [cost-type-name]
      |        |  |  +--ro cost-type-name    cost-type-name
      |        |  |  +--ro cost-mode         cost-mode
      |        |  |  +--ro cost-metric       cost-metric
      |        |  |  +--ro description?      string
      |        |  +--ro default-alto-network-map    resource-id



Shi, et al.               Expires May 14, 2015                  [Page 5]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


      |        +--ro resources* [resource-id]
      |           +--ro resource-id     resource-id
      |           +--ro uri             inet:uri
      |           +--ro media-type      media-type
      |           +--ro accepts*        media-type
      |           +--ro capabilities
      |           |  +--ro cost-constraints?   boolean
      |           |  +--ro cost-type-names*    cost-type-name
      |           |  +--ro prop-types*         endpoint-property-type
      |           +--ro uses*           resource-id
      +---x network-map-service
      |  +--ro output
      |     +--ro network-map-service
      |        +--ro meta
      |        |  +--ro vtag
      |        |     +--ro resource-id    resource-id
      |        |     +--ro tag            tag-string
      |        +--ro network-map* [pid]
      |           +--ro pid                       pid-name
      |           +--ro endpoint-address-group* [address-type]
      |              +--ro address-type       endpoint-address-type
      |              +--ro endpoint-prefix*   endpoint-prefix
      +---x cost-map-service
      |  +--ro output
      |     +--ro cost-map-service
      |        +--ro meta
      |        |  +--ro dependent-vtags*
      |        |  |  +--ro resource-id    resource-id
      |        |  |  +--ro tag            tag-string
      |        |  +--ro cost-type
      |        |     +--ro cost-mode      cost-mode
      |        |     +--ro cost-metric    cost-metric
      |        |     +--ro description?   string
      |        +--ro cost-map* [src]
      |           +--ro src          pid-name
      |           +--ro dst-costs* [dst]
      |              +--ro dst     pid-name
      |              +--ro cost
      +---x filtered-network-map-service
      |  +--ro input
      |  |  +--ro pids*            alto:pid-name
      |  |  +--ro address-types*   alto:endpoint-address-type
      |  +--ro output
      |     +--ro filtered-network-map-service
      |        +--ro meta
      |        |  +--ro vtag
      |        |     +--ro resource-id    resource-id
      |        |     +--ro tag            tag-string



Shi, et al.               Expires May 14, 2015                  [Page 6]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


      |        +--ro network-map* [pid]
      |           +--ro pid                       pid-name
      |           +--ro endpoint-address-group* [address-type]
      |              +--ro address-type       endpoint-address-type
      |              +--ro endpoint-prefix*   endpoint-prefix
      +---x filtered-cost-map-service
      |  +--ro input
      |  |  +--ro cost-type
      |  |  |  +--ro cost-mode      cost-mode
      |  |  |  +--ro cost-metric    cost-metric
      |  |  |  +--ro description?   string
      |  |  +--ro constraints*   alto:constraint
      |  |  +--ro pids
      |  |     +--ro srcs*   alto:pid-name
      |  |     +--ro dsts*   alto:pid-name
      |  +--ro output
      |     +--ro filtered-cost-map-service
      |        +--ro meta
      |        |  +--ro dependent-vtags*
      |        |  |  +--ro resource-id    resource-id
      |        |  |  +--ro tag            tag-string
      |        |  +--ro cost-type
      |        |     +--ro cost-mode      cost-mode
      |        |     +--ro cost-metric    cost-metric
      |        |     +--ro description?   string
      |        +--ro cost-map* [src]
      |           +--ro src          pid-name
      |           +--ro dst-costs* [dst]
      |              +--ro dst     pid-name
      |              +--ro cost
      +---x endpoint-property-service
      |  +--ro input
      |  |  +--ro properties*   alto:endpoint-property-type
      |  |  +--ro endpoints*    alto:typed-endpoint-address
      |  +--ro output
      |     +--ro endpoint-property-service
      |        +--ro meta
      |        |  +--ro dependent-vtags*
      |        |     +--ro resource-id    resource-id
      |        |     +--ro tag            tag-string
      |        +--ro endpoint-properties* [endpoint]
      |           +--ro endpoint      typed-endpoint-address
      |           +--ro properties* [property-type]
      |              +--ro property-type    endpoint-property-type
      |              +--ro property         endpoint-property-value
      +---x endpoint-cost-service
         +--ro input
         |  +--ro cost-type



Shi, et al.               Expires May 14, 2015                  [Page 7]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


         |  |  +--ro cost-mode      cost-mode
         |  |  +--ro cost-metric    cost-metric
         |  |  +--ro description?   string
         |  +--ro constraints*   alto:constraint
         |  +--ro endpoints
         |     +--ro srcs*   alto:typed-endpoint-address
         |     +--ro dsts*   alto:typed-endpoint-address
         +--ro output
            +--ro endpoint-cost-service
               +--ro meta
               |  +--ro cost-type
               |     +--ro cost-mode      cost-mode
               |     +--ro cost-metric    cost-metric
               |     +--ro description?   string
               +--ro endpoint-cost-map* [src]
                  +--ro src          alto:typed-endpoint-address
                  +--ro dst-costs* [dst]
                     +--ro dst     alto:typed-endpoint-address
                     +--ro cost

                                 Figure 1

2.3.  ALTO/YANG Data Instance Description

   Given the YANG RPC specification, we may realize ALTO services by
   embedding it in the NETCONF protocol ([RFC6241]) and the RESTCONF
   protocol ([RESTCONF]).  NETCONF and RESTCONF protocols require a
   conceptual datastore modeled by YANG.  This is an intermediate step
   to embed YANG specification into NETCONF and RESTCONF, hence there is
   no rpc specification.

   Specifically, an ALTO server may maintain the data instances in the
   model below, listed under "resources".  Note that the data instances
   can be virtual--an ALTO server may not physically store the data
   exactly as specified.  For example, a cost map could be generated on
   the fly and in a sense a virtual table.  One may observe from our
   specified instances that we do not specify a data instance to support
   the endpoint cost service (ECS), as this can be highly inefficient.
   For ECS, the value of YANG is mainly in RPC specification.

   module: alto-service-did
      +--ro resources
         +--ro IRD
         |  +--ro meta
         |  |  +--ro cost-types* [cost-type-name]
         |  |  |  +--ro cost-type-name    cost-type-name
         |  |  |  +--ro cost-mode         cost-mode
         |  |  |  +--ro cost-metric       cost-metric



Shi, et al.               Expires May 14, 2015                  [Page 8]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


         |  |  |  +--ro description?      string
         |  |  +--ro default-alto-network-map    resource-id
         |  +--ro resources* [resource-id]
         |     +--ro resource-id     resource-id
         |     +--ro uri             inet:uri
         |     +--ro media-type      media-type
         |     +--ro accepts*        media-type
         |     +--ro capabilities
         |     |  +--ro cost-constraints?   boolean
         |     |  +--ro cost-type-names*    cost-type-name
         |     |  +--ro prop-types*         endpoint-property-type
         |     +--ro uses*           resource-id
         +--ro network-maps
         |  +--ro network-map* [resource-id]
         |     +--ro resource-id    alto:resource-id
         |     +--ro tag            alto:tag-string
         |     +--ro map* [pid]
         |        +--ro pid                       alto:pid-name
         |        +--ro endpoint-address-group* [address-type]
         |           +--ro address-type       endpoint-address-type
         |           +--ro endpoint-prefix*   endpoint-prefix
         +--ro cost-maps
         |  +--ro cost-map* [resource-id]
         |     +--ro resource-id    alto:resource-id
         |     +--ro tag            alto:tag-string
         |     +--ro meta
         |     |  +--ro dependent-vtags*
         |     |  |  +--ro resource-id    resource-id
         |     |  |  +--ro tag            tag-string
         |     |  +--ro cost-type
         |     |     +--ro cost-mode      cost-mode
         |     |     +--ro cost-metric    cost-metric
         |     |     +--ro description?   string
         |     +--ro map* [src]
         |        +--ro src          alto:pid-name
         |        +--ro dst-costs* [dst]
         |           +--ro dst     alto:pid-name
         |           +--ro cost
         +--ro endpoint-property-map
            +--ro meta
            |  +--ro dependent-vtags*
            |     +--ro resource-id    resource-id
            |     +--ro tag            tag-string
            +--ro endpoint-properties* [endpoint]
               +--ro endpoint      typed-endpoint-address
               +--ro properties* [property-type]
                  +--ro property-type    endpoint-property-type
                  +--ro property         endpoint-property-value



Shi, et al.               Expires May 14, 2015                  [Page 9]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


                                 Figure 2

2.4.  ALTO/YANG with Integration with NETCONF

   Next we consider embedding the YANG specification into an existing
   framework, i.e., the NETCONF protocol ([RFC6241]) or the RESTCONF
   protocol ([RESTCONF]).  In other words, we try to implement an ALTO
   service using a standard operation in these frameworks and not define
   a custom RPC.  When we consider the mapping of an ALTO service to a
   standard operation in NETCONF or RESTCONF, we try to enumerate all
   possibilities.  We considering NETCONF embedding in this section and
   RESTCONF embedding in the next section.

   The Network Configuration (NETCONF) Protocol [RFC6241] provides
   mechanisms to manipulate configuration data and state data of network
   devices via some of its standard operations (e.g, <get-config>).  The
   NETCONF protocol messages are encoded in YANG-modeled XML and
   transported via persistent connections such as SSH.  Given the
   datastore, NETCONF will be able to handle simple retrieval,
   insertion, deletion, and replacement of configuration or state data.

   Perceivably one may consider using NETCONF as a carrier for ALTO
   protocol messages.  Although the ALTO message encoding is JSON and
   its datastore is implementation dependent, ALTO is analogous to
   NETCONF in the following manner.  ALTO Information resources may be
   considered as state data of the network, which is stored as the
   <running> datastore.  Given the datastore, the process of fetching
   information resources can be accomplished via standard operations of
   NETCONF.  One only needs to convert the ALTO compliant JSON messages
   to XML encoding and add a few NETCONF headers.  In Appendix B, we
   provided some examples of some ALTO protocol messages converted to
   XML with NETCONF headers.  One may use the NETCONF protocol to
   retrieve them.  Specifically, one may use the NETCONF <get> operation
   to retrieve the full ALTO network map, cost map, and the information
   resource directory; with the <filter> parameter, NETCONF will be able
   to implement filtered map services as well as endpoint property
   services.

   Using this approach, implementing an ALTO server is almost
   effortless; nevertheless, there are certain limitations to this
   approach.  NETCONF requires a secure persistent connection (e.g.,
   SSH) while the ALTO protocol uses a RESTful design.  The XML encoding
   of the messages is more verbose and less clear than the native ALTO
   JSON encoding.  The scalability is questionable, as the running
   datastore must be stored or translated to XML to enable XML
   manipulation in RPC.  The extensibility is also a concern, as there
   are limitation of NETCONF standard operations and XML manipulation.




Shi, et al.               Expires May 14, 2015                 [Page 10]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   For example, the endpoint cost service would be difficult or
   inefficient to realize using NETCONF standard operations.

2.4.1.  Tree Diagram for ALTO/YANG with NETCONF

   Figure 3 shows the tree diagram of the ALTO/YANG module alto-service-
   netconf (Appendix A.4) to be embedded in NETCONF.  The "resources"
   part of this module is exactly the same as that in alto-service-did.
   The endpoint-cost-service rpc is the same as that in alto-service-
   rpc.  It is difficult or inefficient to implement ECS using NETCONF
   standard operations, hence we leave it as a custom RPC.

   module: alto-service-netconf
      +--ro resources
         +--ro IRD
         |  +--ro meta
         |  |  +--ro cost-types* [cost-type-name]
         |  |  |  +--ro cost-type-name    cost-type-name
         |  |  |  +--ro cost-mode         cost-mode
         |  |  |  +--ro cost-metric       cost-metric
         |  |  |  +--ro description?      string
         |  |  +--ro default-alto-network-map    resource-id
         |  +--ro resources* [resource-id]
         |     +--ro resource-id     resource-id
         |     +--ro uri             inet:uri
         |     +--ro media-type      media-type
         |     +--ro accepts*        media-type
         |     +--ro capabilities
         |     |  +--ro cost-constraints?   boolean
         |     |  +--ro cost-type-names*    cost-type-name
         |     |  +--ro prop-types*         endpoint-property-type
         |     +--ro uses*           resource-id
         +--ro network-maps
         |  +--ro network-map* [resource-id]
         |     +--ro resource-id    alto:resource-id
         |     +--ro tag            alto:tag-string
         |     +--ro map* [pid]
         |        +--ro pid                       alto:pid-name
         |        +--ro endpoint-address-group* [address-type]
         |           +--ro address-type       endpoint-address-type
         |           +--ro endpoint-prefix*   endpoint-prefix
         +--ro cost-maps
         |  +--ro cost-map* [resource-id]
         |     +--ro resource-id    alto:resource-id
         |     +--ro tag            alto:tag-string
         |     +--ro meta
         |     |  +--ro dependent-vtags*
         |     |  |  +--ro resource-id    resource-id



Shi, et al.               Expires May 14, 2015                 [Page 11]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


         |     |  |  +--ro tag            tag-string
         |     |  +--ro cost-type
         |     |     +--ro cost-mode      cost-mode
         |     |     +--ro cost-metric    cost-metric
         |     |     +--ro description?   string
         |     +--ro map* [src]
         |        +--ro src          alto:pid-name
         |        +--ro dst-costs* [dst]
         |           +--ro dst     alto:pid-name
         |           +--ro cost
         +--ro endpoint-property-map
            +--ro meta
            |  +--ro dependent-vtags*
            |     +--ro resource-id    resource-id
            |     +--ro tag            tag-string
            +--ro endpoint-properties* [endpoint]
               +--ro endpoint      typed-endpoint-address
               +--ro properties* [property-type]
                  +--ro property-type    endpoint-property-type
                  +--ro property         endpoint-property-value
   rpcs:
      +---x endpoint-cost-service
         +--ro input
         |  +--ro cost-type
         |  |  +--ro cost-mode      cost-mode
         |  |  +--ro cost-metric    cost-metric
         |  |  +--ro description?   string
         |  +--ro constraints*   alto:constraint
         |  +--ro endpoints
         |     +--ro srcs*   alto:typed-endpoint-address
         |     +--ro dsts*   alto:typed-endpoint-address
         +--ro output
            +--ro endpoint-cost-service
               +--ro meta
               |  +--ro cost-type
               |     +--ro cost-mode      cost-mode
               |     +--ro cost-metric    cost-metric
               |     +--ro description?   string
               +--ro endpoint-cost-map* [src]
                  +--ro src          alto:typed-endpoint-address
                  +--ro dst-costs* [dst]
                     +--ro dst     alto:typed-endpoint-address
                     +--ro cost

                                 Figure 3






Shi, et al.               Expires May 14, 2015                 [Page 12]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


2.4.2.  Full Network Map Service using NETCONF

   First consider the full network map service.  Assume a YANG model
   specified as alto-service-netconf (see Appendix A.4), with its tree
   diagram in Section 2.4.1.

   NETCONF has provided two RPCs to retrieve data: the <get> operation
   and the <get-config> operation.  The <get> operation can be used to
   retrieve both configuration data and state data, whereas the <get-
   config> operation is used to retrieve only configuration data.  Since
   ALTO resources are assumed to be read-only state data, in the current
   design, we use the <get> operation.  The <get> operation defines two
   filter types in the NETCONF base protocol [RFC6241], subtree
   filtering and optional XPATH filtering capabilities.  Hence we
   consider both types.

2.4.2.1.  Approach 1: Using Subtree Filtering

   To retrieve a network map with resource-id INPUT-NETWORK-MAP-
   RESOURCE-ID, the client specifies it in the following netconf RPC
   template:

   <rpc message-id=SEQ-NUM
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <get>
       <filter type="subtree">
         <resources
           xmlns="urn:ietf:params:xml:ns:yang:alto-service-netconf">
           <network-maps>
             <network-map>
               <resource-id>INPUT-NETWORK-MAP-RESOURCE-ID</resource-id>
               <tag/>
               <map/>
             </network-map>
           </network-maps>
         </resources>
       </filter>
     </get>
   </rpc>

   One can observe that the query mapping specifies not only the
   resource-id as a content matching node, but also the tag and map
   nodes, as two selection nodes, to indicate that these two fields
   should be included in the filter output.  A simpler mapping, using
   the default processing of filtering output (the last output rule of
   Section 6.2.5 of [RFC6241]), is to omit <tag/> and <map/>.  This will
   give the same output.  We suggest the more complete template for more
   explicit results.



Shi, et al.               Expires May 14, 2015                 [Page 13]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   An example of the query, for a network map with resource-id
   myNetMap1, is the following:

   <rpc message-id=SEQ-NUM
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <get>
       <filter type="subtree">
         <resources
           xmlns="urn:ietf:params:xml:ns:yang:alto-service-netconf">
           <network-maps>
             <network-map>
               <resource-id>myNetMap1</resource-id>
               <tag/>
               <map/>
             </network-map>
           </network-maps>
         </resources>
       </filter>
     </get>
   </rpc>

   An example reply from the server then will be:





























Shi, et al.               Expires May 14, 2015                 [Page 14]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   <rpc-reply message-id=SEQ-NUM
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <data>
       <resources
         xmlns="urn:ietf:params:xml:ns:yang:alto-service-netconf">
         <network-maps>
           <network-map>
             <resource-id>myNetMap1</resource-id>
             <tag>da65eca2tus10ce8b0740a1938e3f8eb1d4785</tag>
             <map>
               <pid>PID1</pid>
               <endpoint-address-group>
                 <address-type>ipv4</address-type>
                 <endpoint-prefix>192.0.2.0/24</endpoint-prefix>
                 <endpoint-prefix>198.51.100.0/25</endpoint-prefix>
               </endpoint-address-group>
             </map>
             <map>
               <pid>PID2</pid>
               <endpoint-address-group>
                 <address-type>ipv4</address-type>
                 <endpoint-prefix>198.51.100.128/25</endpoint-prefix>
               </endpoint-address-group>
             </map>
             <map>
               <pid>PID3</pid>
               <endpoint-address-group>
                 <address-type>ipv4</address-type>
                 <endpoint-prefix>0.0.0.0/0</endpoint-prefix>
               </endpoint-address-group>
               <endpoint-address-group>
                 <address-type>ipv6</address-type>
                 <endpoint-prefix>::/0</endpoint-prefix>
               </endpoint-address-group>
             </map>
           </network-map>
         </network-maps>
       </resources>
     </data>
   </rpc-reply>

2.4.2.2.  Approach 2: Using XPATH Filtering

   To retrieve a network map with resource-id INPUT-NETWORK-MAP-
   RESOURCE-ID, the client specifies it in the following netconf RPC
   template:





Shi, et al.               Expires May 14, 2015                 [Page 15]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   <rpc message-id=SEQ-NUM
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <get>
       <filter
         xmlns:t="urn:ietf:params:xml:ns:yang:alto-service-netconf"
         type="xpath"
         select="/t:resources/t:network-maps/t:network-map
                 [t:resource-id=INPUT-NETWORK-MAP-RESOURCE-ID]" />
     </get>
   </rpc>

   Note that [RFC6241] requires only that a NETCONF server MAY support
   xpath.  Hence, this approach may or may not work on a given NETCONF
   server.

   An example of the query, for a network map with resource-id
   myNetMap1, is the following.  Note that the XPATH expression would
   select the appropriate <network-map> node including its subtree, but
   not the ancestor node <resources> or <network-maps>.  According to
   the NETCONF modification rules defined in Section 8.9.5.1 of
   [RFC6241], the ancestor nodes of the XPATH result are also encoded,
   in particular, the tags <resources> and <network-maps>.

   <rpc message-id=SEQ-NUM
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <get>
       <filter
         xmlns:t="urn:ietf:params:xml:ns:yang:alto-service-netconf"
         type="xpath"
         select="/t:resources/t:network-maps/t:network-map
                 [t:resource-id='myNetMap1']" />
     </get>
   </rpc>


   The output of this query is the same as the subtree based query:















Shi, et al.               Expires May 14, 2015                 [Page 16]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   <rpc-reply message-id=SEQ-NUM
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <data>
       <resources
         xmlns="urn:ietf:params:xml:ns:yang:alto-service-netconf">
         <network-maps>
           <network-map>
             <resource-id>myNetMap1</resource-id>
             <tag>da65eca2tus10ce8b0740a1938e3f8eb1d4785</tag>
             <map>
               <pid>PID1</pid>
               <endpoint-address-group>
                 <address-type>ipv4</address-type>
                 <endpoint-prefix>192.0.2.0/24</endpoint-prefix>
                 <endpoint-prefix>198.51.100.0/25</endpoint-prefix>
               </endpoint-address-group>
             </map>
             <map>
               <pid>PID2</pid>
               <endpoint-address-group>
                 <address-type>ipv4</address-type>
                 <endpoint-prefix>198.51.100.128/25</endpoint-prefix>
               </endpoint-address-group>
             </map>
             <map>
               <pid>PID3</pid>
               <endpoint-address-group>
                 <address-type>ipv4</address-type>
                 <endpoint-prefix>0.0.0.0/0</endpoint-prefix>
               </endpoint-address-group>
               <endpoint-address-group>
                 <address-type>ipv6</address-type>
                 <endpoint-prefix>::/0</endpoint-prefix>
               </endpoint-address-group>
             </map>
           </network-map>
         </network-maps>
       </resources>
     </data>
   </rpc-reply>

2.4.3.  Full Cost Map Service using NETCONF

   Next consider the full cost map service.  Assume a YANG model
   specified as alto-service-netconf (see Appendix A.4), with its tree
   diagram in Figure 3.  Similar to the full network map service, we
   also consider both filter types.




Shi, et al.               Expires May 14, 2015                 [Page 17]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   In the ALTO protocol, resource-id uniquely identifies a cost map
   resource, but tags are not defined.  Neither are included in the
   "meta" field of the response.  However, in order to use the NETCONF
   filtering capabilities (both subtree and xpath), we must use
   resource-id as the key of the list "cost-maps".

2.4.3.1.  Approach 1: Using Subtree Filtering

   To retrieve a cost map with resource-id INPUT-COST-MAP-RESOURCE-ID,
   the client specifies it in the following netconf RPC template:

   <rpc message-id=SEQ-NUM
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <get>
       <filter type="subtree">
         <resources
           xmlns="urn:ietf:params:xml:ns:yang:alto-service-netconf">
           <cost-maps>
             <cost-map>
               <resource-id>INPUT-COST-MAP-RESOURCE-ID</resource-id>
               <tag/>
               <meta/>
               <map/>
             </cost-map>
           </cost-maps>
         </resources>
       </filter>
     </get>
   </rpc>

   Note that similar to the preceding network map template design, we
   also include the selection nodes <tag/>, <meta/>, and <map/> in the
   query template to make explicit the output.  An alternative is to
   omit all of these selection nodes.  Note that omitting only some of
   the selection nodes will produce incorrect results.

   An example of the query, for a cost map with resource-id myCostMap1,
   is the following:













Shi, et al.               Expires May 14, 2015                 [Page 18]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   <rpc message-id=SEQ-NUM
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <get>
       <filter type="subtree">
         <resources
           xmlns="urn:ietf:params:xml:ns:yang:alto-service-netconf">
           <cost-maps>
             <cost-map>
               <resource-id>myCostMap1</resource-id>
               <tag/>
               <meta/>
               <map/>
             </cost-map>
           </cost-maps>
         </resources>
       </filter>
     </get>
   </rpc>

   An example reply from the server then will be:

   <rpc-reply message-id=SEQ-NUM
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <data>
       <resources>
         <cost-maps>
           <cost-map>
             <resource-id>myCostMap1</resource-id>
             <tag>tus10ce8b0740a1938e3f8eb1d4785da65eca2</tag>
             <meta>
               <dependent-vtags>
                 <resource-id>myNetMap1</resource-id>
                 <tag>da65eca2tus10ce8b0740a1938e3f8eb1d4785</tag>
               </dependent-vtags>
               <cost-type>
                 <cost-mode>numerical</cost-mode>
                 <cost-metric>routingcost</cost-metric>
               </cost-type>
             </meta>
             <map>
               <src>PID1</src>
               <dst-costs>
                 <dst>PID1</dst>
                 <cost>1</cost>
               </dst-costs>
               <dst-costs>
                 <dst>PID2</dst>
                 <cost>5</cost>



Shi, et al.               Expires May 14, 2015                 [Page 19]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


               </dst-costs>
               <dst-costs>
                 <dst>PID3</dst>
                 <cost>10</cost>
               </dst-costs>
             </map>
             <map>
               <src>PID2</src>
               <dst-costs>
                 <dst>PID1</dst>
                 <cost>5</cost>
               </dst-costs>
               <dst-costs>
                 <dst>PID2</dst>
                 <cost>1</cost>
               </dst-costs>
               <dst-costs>
                 <dst>PID3</dst>
                 <cost>15</cost>
               </dst-costs>
             </map>
             <map>
               <src>PID3</src>
               <dst-costs>
                 <dst>PID1</dst>
                 <cost>20</cost>
               </dst-costs>
               <dst-costs>
                 <dst>PID2</dst>
                 <cost>15</cost>
               </dst-costs>
             </map>
           </cost-map>
         </cost-maps>
       </resources>
     </data>
   </rpc-reply>

2.4.3.2.  Approach 2: Using XPath

   To retrieve a cost map with resource-id INPUT-COST-MAP-RESOURCE-ID,
   the client specifies it in the following netconf RPC template:









Shi, et al.               Expires May 14, 2015                 [Page 20]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


 <rpc message-id=SEQ-NUM
   xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
   <get>
     <filter
        xmlns:t="urn:ietf:params:xml:ns:yang:alto-service-netconf"
        type="xpath"
        select="/t:resources/t:cost-maps/
                t:cost-map[t:resource-id=INPUT-COST-MAP-RESOURCE-ID]" />
   </get>
 </rpc>

   An example of the query, for a cost map with resource-id myCostMap1,
   is the following:

   <rpc message-id=SEQ-NUM
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <get>
       <filter
          xmlns:t="urn:ietf:params:xml:ns:yang:alto-service-netconf"
          type="xpath"
          select="/t:resources/t:cost-maps/
                  t:cost-map[t:resource-id='myCostMap1']" />
     </get>
   </rpc>

   An example reply from the server then will be:

   <rpc-reply message-id=SEQ-NUM
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <data>
       <resources
         xmlns="urn:ietf:params:xml:ns:yang:alto-service-netconf>
         <cost-maps>
           <cost-map>
             <resource-id>myCostMap1</resource-id>
             <tag>tus10ce8b0740a1938e3f8eb1d4785da65eca2</tag>
             <meta>
               <dependent-vtags>
                 <resource-id>myNetMap1</resource-id>
                 <tag>da65eca2tus10ce8b0740a1938e3f8eb1d4785</tag>
               </dependent-vtags>
               <cost-type>
                 <cost-mode>numerical</cost-mode>
                 <cost-metric>routingcost</cost-metric>
               </cost-type>
             </meta>
             <map>
               <src>PID1</src>



Shi, et al.               Expires May 14, 2015                 [Page 21]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


               <dst-costs>
                 <dst>PID1</dst>
                 <cost>1</cost>
               </dst-costs>
               <dst-costs>
                 <dst>PID2</dst>
                 <cost>5</cost>
               </dst-costs>
               <dst-costs>
                 <dst>PID3</dst>
                 <cost>10</cost>
               </dst-costs>
             </map>
             <map>
               <src>PID2</src>
               <dst-costs>
                 <dst>PID1</dst>
                 <cost>5</cost>
               </dst-costs>
               <dst-costs>
                 <dst>PID2</dst>
                 <cost>1</cost>
               </dst-costs>
               <dst-costs>
                 <dst>PID3</dst>
                 <cost>15</cost>
               </dst-costs>
             </map>
             <map>
               <src>PID3</src>
               <dst-costs>
                 <dst>PID1</dst>
                 <cost>20</cost>
               </dst-costs>
               <dst-costs>
                 <dst>PID2</dst>
                 <cost>15</cost>
               </dst-costs>
             </map>
           </cost-map>
         </cost-maps>
       </resources>
     </data>
   </rpc-reply>







Shi, et al.               Expires May 14, 2015                 [Page 22]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


2.4.4.  Filtered Network Map Service using NETCONF

   Next we consider filtered network map.  For consistency, we consider
   the same yang module as in Appendix A.4.  For ease of reading, we
   duplicate the tree diagram here:

   +--ro network-maps
   |  +--ro network-map* [resource-id]
   |     +--ro resource-id    alto:resource-id
   |     +--ro tag            alto:tag-string
   |     +--ro map* [pid]
   |        +--ro pid                       alto:pid-name
   |        +--ro endpoint-address-group* [address-type]
   |           +--ro address-type       endpoint-address-type
   |           +--ro endpoint-prefix*   endpoint-prefix

2.4.4.1.  Approach 1: Using Subtree Filtering

   To retrieve INPUT-PID-1, INPUT-PID-2, ..., INPUT-PID-k of a network
   map with resource-id INPUT-NETWORK-MAP-RESOURCE-ID, the client
   specifies it in the following netconf RPC template:






























Shi, et al.               Expires May 14, 2015                 [Page 23]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   <rpc message-id=SEQ-NUM
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <get>
       <filter type="subtree">
         <resources
           xmlns="urn:ietf:params:xml:ns:yang:alto-service-netconf">
           <network-maps>
             <network-map>
               <resource-id>INPUT-NETWORK-MAP-RESOURCE-ID</resource-id>
               <tag/>
               <map>
                 <pid>INPUT-PID-1</pid>
                 <endpoint-address-group/>
               </map>
               <map>
                 <pid>INPUT-PID-2</pid>
                 <endpoint-address-group/>
               </map>
               ...
               <map>
                 <pid>INPUT-PID-k</pid>
                 <endpoint-address-group/>
               </map>
             </network-map>
           </network-maps>
         </resources>
       </filter>
     </get>
   </rpc>

   Note that the template explicitly includes <endpoint-address-group/>
   as selection nodes to indicate the desired output.  The <endpoint-
   address-group/> selection nodes in the template can be omitted.  On
   the other hand, the selection node <tag/> is necessary, otherwise,
   the <tag> element would not be included in the response.

   An example of the query, for PID1 and PID3 of a network map with
   resource-id myNetMap1, is the following:













Shi, et al.               Expires May 14, 2015                 [Page 24]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   <rpc message-id=SEQ-NUM
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <get>
       <filter type="subtree">
         <resources
           xmlns="urn:ietf:params:xml:ns:yang:alto-service-netconf">
           <network-maps>
             <network-map>
               <resource-id>myNetMap1</resource-id>
               <tag/>
               <map>
                 <pid>PID1</pid>
                 <endpoint-address-group/>
               </map>
               <map>
                 <pid>PID3</pid>
                 <endpoint-address-group/>
               </map>
             </network-map>
           </network-maps>
         </resources>
       </filter>
     </get>
   </rpc>

   An example reply from the server then will be:

























Shi, et al.               Expires May 14, 2015                 [Page 25]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   <rpc-reply message-id=SEQ-NUM
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <data>
       <resources
         xmlns="urn:ietf:params:xml:ns:yang:alto-service-netconf">
         <network-maps>
           <network-map>
             <resource-id>myNetMap1</resource-id>
             <tag>da65eca2tus10ce8b0740a1938e3f8eb1d4785</tag>
             <map>
               <pid>PID1</pid>
               <endpoint-address-group>
                 <address-type>ipv4</address-type>
                 <endpoint-prefix>192.0.2.0/24</endpoint-prefix>
                 <endpoint-prefix>198.51.100.0/25</endpoint-prefix>
               </endpoint-address-group>
             </map>
             <map>
               <pid>PID3</pid>
               <endpoint-address-group>
                 <address-type>ipv4</address-type>
                 <endpoint-prefix>0.0.0.0/0</endpoint-prefix>
               </endpoint-address-group>
               <endpoint-address-group>
                 <address-type>ipv6</address-type>
                 <endpoint-prefix>::/0</endpoint-prefix>
               </endpoint-address-group>
             </map>
           </network-map>
         </network-maps>
       </resources>
     </data>
   </rpc-reply>

2.4.4.2.  Approach 2: Using XPATH Filtering

   To retrieve INPUT-PID-1, INPUT-PID-2, ..., INPUT-PID-k of a network
   map with resource-id INPUT-NETWORK-MAP-RESOURCE-ID, the client
   specifies it in the following netconf RPC template:












Shi, et al.               Expires May 14, 2015                 [Page 26]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   <rpc message-id=SEQ-NUM
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <get>
       <filter
         xmlns:t="urn:ietf:params:xml:ns:yang:alto-service-netconf"
         type="xpath"
         select="/t:resources/t:network-maps/t:network-map
             [t:resource-id=INPUT-NETWORK-MAP-RESOURCE-ID]/resource-id
           | /t:resources/t:network-maps/t:network-map
             [t:resource-id=INPUT-NETWORK-MAP-RESOURCE-ID]/tag
           | /t:resources/t:network-maps/t:network-map
             [t:resource-id=INPUT-NETWORK-MAP-RESOURCE-ID]/map
             [pid=INPUT-PID-1 or pid=INPUT-PID-2 or ...
             or pid=INPUT-PID-k]" />
     </get>
   </rpc>

   One observe that the template uses XPATH union in the select
   attribute of the filter, which is necessary because the XPATH
   operation will not select the resource-id and tag nodes if we only
   have the XPATH expression "/t:resources/t:network-maps/t:network-
   map[t:resource-id=INPUT-NETWORK-MAP-RESOURCE-ID]/map[pid=INPUT-PID-1
   or pid=INPUT-PID-2 or ... or pid=INPUT-PID-k]".

   An example of the query, for PID1 and PID3 of a network map with
   resource-id myNetMap1, is the following:

 <rpc message-id=SEQ-NUM
   xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
   <get>
     <filter
       xmlns:t="urn:ietf:params:xml:ns:yang:alto-service-netconf"
       type="xpath"
       select="/t:resources/t:network-maps/t:network-map
           [t:resource-id='myNetMap1']/resource-id
         | /t:resources/t:network-maps/t:network-map
           [t:resource-id='myNetMap1']/tag
         | /t:resources/t:network-maps/t:network-map
           [t:resource-id='myNetMap1']/map[pid='PID1' or pid='PID3']" />
   </get>
 </rpc>

   The output of this query is the same as the subtree based query:








Shi, et al.               Expires May 14, 2015                 [Page 27]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   <rpc-reply message-id=SEQ-NUM
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <data>
       <resources
         xmlns="urn:ietf:params:xml:ns:yang:alto-service-netconf">
         <network-maps>
           <network-map>
             <resource-id>myNetMap1</resource-id>
             <tag>da65eca2tus10ce8b0740a1938e3f8eb1d4785</tag>
             <map>
               <pid>PID1</pid>
               <endpoint-address-group>
                 <address-type>ipv4</address-type>
                 <endpoint-prefix>192.0.2.0/24</endpoint-prefix>
                 <endpoint-prefix>198.51.100.0/25</endpoint-prefix>
               </endpoint-address-group>
             </map>
             <map>
               <pid>PID3</pid>
               <endpoint-address-group>
                 <address-type>ipv4</address-type>
                 <endpoint-prefix>0.0.0.0/0</endpoint-prefix>
               </endpoint-address-group>
               <endpoint-address-group>
                 <address-type>ipv6</address-type>
                 <endpoint-prefix>::/0</endpoint-prefix>
               </endpoint-address-group>
             </map>
           </network-map>
         </network-maps>
       </resources>
     </data>
   </rpc-reply>

2.4.5.  Filtered Cost Map Service using NETCONF

   Then we consider filtered cost map service.  For consistency, we
   consider the same yang module as in Appendix A.4.  For ease of
   reading, we duplicate the tree diagram here:












Shi, et al.               Expires May 14, 2015                 [Page 28]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   +--ro cost-maps
   |  +--ro cost-map* [resource-id]
   |     +--ro resource-id    alto:resource-id
   |     +--ro tag            alto:tag-string
   |     +--ro meta
   |     |  +--ro dependent-vtags*
   |     |  |  +--ro resource-id    resource-id
   |     |  |  +--ro tag            tag-string
   |     |  +--ro cost-type
   |     |     +--ro cost-mode      cost-mode
   |     |     +--ro cost-metric    cost-metric
   |     |     +--ro description?   string
   |     +--ro map* [src]
   |        +--ro src          alto:pid-name
   |        +--ro dst-costs* [dst]
   |           +--ro dst     alto:pid-name
   |           +--ro cost

2.4.5.1.  Approach 1: Using Subtree Filtering

   To retrieve INPUT-SRC-PID-1, INPUT-SRC-PID-2, ..., INPUT-SRC-PID-p
   and INPUT-DST-PID-1, INPUT-DST-PID-2, ..., INPUT-DST-PID-q of a cost
   map with resource-id INPUT-COST-MAP-RESOURCE-ID, the client specifies
   it in the following netconf RPC template:



























Shi, et al.               Expires May 14, 2015                 [Page 29]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   <rpc message-id=SEQ-NUM
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <get>
       <filter type="subtree">
         <resources
           xmlns="urn:ietf:params:xml:ns:yang:alto-service-netconf">
           <cost-maps>
             <cost-map>
               <resource-id>
                 INPUT-COST-MAP-RESOURCE-ID
               </resource-id>
               <tag/>
               <meta/>
               <map>
                 <src>INPUT-SRC-PID-1</src>
                 <dst-costs>
                   <dst>INPUT-DST-PID-1</dst>
                   <cost/>
                 </dst-costs>
                 ...
                 <dst-costs>
                   <dst>INPUT-DST-PID-q</dst>
                   <cost/>
                 </dst-costs>
               </map>
               ...
               <map>
                 <src>INPUT-SRC-PID-p</src>
                 <dst-costs>
                   <dst>INPUT-DST-PID-1</dst>
                   <cost/>
                 </dst-costs>
                 ...
                 <dst-costs>
                   <dst>INPUT-DST-PID-q</dst>
                   <cost/>
                 </dst-costs>
               </map>
             </cost-map>
           </cost-maps>
         </resources>
       </filter>
     </get>
   </rpc>

   One can observe that in the template, client must list all
   combinations of src and dst to retrieve the cost, which is very
   inefficient when the number of src and dst grows.



Shi, et al.               Expires May 14, 2015                 [Page 30]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   An example of the query, for src: PID1, PID3 and dst: PID2, PID3 of a
   cost map with resource-id myCostMap1, is the following:

   <rpc message-id=SEQ-NUM
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <get>
       <filter type="subtree">
         <resources
           xmlns="urn:ietf:params:xml:ns:yang:alto-service-netconf">
           <cost-maps>
             <cost-map>
               <resource-id>
                 myCostMap1
               </resource-id>
               <tag/>
               <meta/>
               <map>
                 <src>PID1</src>
                 <dst-costs>
                   <dst>PID2</dst>
                   <cost/>
                 </dst-costs>
                 <dst-costs>
                   <dst>PID3</dst>
                   <cost/>
                 </dst-costs>
               </map>
               <map>
                 <src>PID3</src>
                 <dst-costs>
                   <dst>PID2</dst>
                   <cost/>
                 </dst-costs>
                 <dst-costs>
                   <dst>PID3</dst>
                   <cost/>
                 </dst-costs>
               </map>
             </cost-map>
           </cost-maps>
         </resources>
       </filter>
     </get>
   </rpc>

   An example reply from the server then will be:





Shi, et al.               Expires May 14, 2015                 [Page 31]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   <rpc-reply message-id=SEQ-NUM
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <data>
       <resources
         xmlns="urn:ietf:params:xml:ns:yang:alto-service-netconf">
         <cost-maps>
           <cost-map>
             <resource-id>myCostMap1</resource-id>
             <tag>tus10ce8b0740a1938e3f8eb1d4785da65eca2</tag>
             <meta>
               <dependent-vtags>
                 <resource-id>myNetMap1</resource-id>
                 <tag>da65eca2tus10ce8b0740a1938e3f8eb1d4785</tag>
               </dependent-vtags>
               <cost-type>
                 <cost-mode>numerical</cost-mode>
                 <cost-metric>routingcost</cost-metric>
               </cost-type>
             </meta>
             <map>
               <src>PID1</src>
               <dst-costs>
                 <dst>PID2</dst>
                 <cost>5</cost>
               </dst-costs>
               <dst-costs>
                 <dst>PID3</dst>
                 <cost>10</cost>
               </dst-costs>
             </map>
             <map>
               <src>PID3</src>
               <dst-costs>
                 <dst>PID2</dst>
                 <cost>15</cost>
               </dst-costs>
             </map>
           </cost-map>
         </cost-maps>
       </resources>
     </data>
   </rpc-reply>

2.4.5.2.  Approach 2 : Using XPath

   To retrieve INPUT-SRC-PID-1, INPUT-SRC-PID-2, ..., INPUT-SRC-PID-p
   and INPUT-DST-PID-1, INPUT-DST-PID-2, ..., INPUT-DST-PID-q of a cost




Shi, et al.               Expires May 14, 2015                 [Page 32]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   map with resource-id INPUT-COST-MAP-RESOURCE-ID, the client specifies
   it in the following netconf RPC template:

   <rpc message-id=SEQ-NUM
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <get>
       <filter
         xmlns:t="urn:ietf:params:xml:ns:yang:alto-service-netconf"
         type="xpath"
         select="/t:resources/t:cost-maps/t:cost-map
             [t:resource-id=INPUT-COST-MAP-RESOURCE-ID]/t:resource-id
           | /t:resources/t:cost-maps/t:cost-map
             [t:resource-id=INPUT-COST-MAP-RESOURCE-ID]/t:tag
           | /t:resources/t:cost-maps/t:cost-map
             [t:resource-id=INPUT-COST-MAP-RESOURCE-ID]/t:meta
           | /t:resources/t:cost-maps/t:cost-map
             [t:resource-id=INPUT-COST-MAP-RESOURCE-ID]/
             t:map[t:src=INPUT-SRC-PID-1 or t:src=INPUT-SRC-PID-2
               or ... or t:src=INPUT-SRC-PID-p]/t:src
           | /t:resources/t:cost-maps/t:cost-map
             [t:resource-id=INPUT-COST-MAP-RESOURCE-ID]/
             t:map[t:src=INPUT-SRC-PID-1 or t:src=INPUT-SRC-PID-2
               or ... or t:src=INPUT-SRC-PID-p]/t:dst-costs
             [t:dst=INPUT-DST-PID-1 or t:dst=INPUT-DST-PID-2
               or ... or t:dst=INPUT-DST-PID-q]" />
     </get>
   </rpc>

   One observe that similar to the xpath template for filtered network
   map, the xpath template for filtered cost map also used XPATH union
   in the select attribute of the filter, which is necessary because the
   XPATH operation will not select the resource-id and tag and src nodes
   if we only have the XPATH expression "/t:resources/t:cost-maps/
   t:cost-map[t:resource-id=INPUT-COST-MAP-RESOURCE-
   ID]/t:map[t:src=INPUT-SRC-PID-1 or t:src=INPUT-SRC-PID-2 or ... or
   t:src=INPUT-SRC-PID-p]/t:dst-costs[t:dst=INPUT-DST-PID-1 or
   t:dst=INPUT-DST-PID-2 or ... or t:dst=INPUT-DST-PID-q]".

   Despite that one needs to specify the src PIDs multiple times, there
   is no need to provide a cartesian product of src PIDs and dst PIDs,
   which is more efficient compared to the subtree filtering approach.

   An example of the query, for srcs: PID1, PID3 and dsts: PID2, PID3 of
   a cost map with resource-id myCostMap1, is the following:







Shi, et al.               Expires May 14, 2015                 [Page 33]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   <rpc message-id=SEQ-NUM
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <get>
       <filter
         xmlns:t="urn:ietf:params:xml:ns:yang:alto-service-netconf"
         type="xpath"
         select="/t:resources/t:cost-maps/t:cost-map
             [t:resource-id='myCostMap1']/t:resource-id
           | /t:resources/t:cost-maps/t:cost-map
             [t:resource-id='myCostMap1']/t:tag
           | /t:resources/t:cost-maps/t:cost-map
             [t:resource-id='myCostMap1']/t:meta
           | /t:resources/t:cost-maps/t:cost-map
             [t:resource-id='myCostMap1']/
             t:map[t:src='PID1' or t:src='PID3']/t:src
           | /t:resources/t:cost-maps/t:cost-map
             [t:resource-id='myCostMap1']/
             t:map[t:src='PID1' or t:src='PID3']/t:dst-costs
             [t:dst='PID2' or t:dst='PID3']" />
     </get>
   </rpc>

   An example reply from the server then will be:




























Shi, et al.               Expires May 14, 2015                 [Page 34]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   <rpc-reply message-id=SEQ-NUM
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <data>
       <resources
         xmlns="urn:ietf:params:xml:ns:yang:alto-service-netconf">
         <cost-maps>
           <cost-map>
             <resource-id>myCostMap1</resource-id>
             <tag>tus10ce8b0740a1938e3f8eb1d4785da65eca2</tag>
             <meta>
               <dependent-vtags>
                 <resource-id>myNetMap1</resource-id>
                 <tag>da65eca2tus10ce8b0740a1938e3f8eb1d4785</tag>
               </dependent-vtags>
               <cost-type>
                 <cost-mode>numerical</cost-mode>
                 <cost-metric>routingcost</cost-metric>
               </cost-type>
             </meta>
             <map>
               <src>PID1</src>
               <dst-costs>
                 <dst>PID2</dst>
                 <cost>5</cost>
               </dst-costs>
               <dst-costs>
                 <dst>PID3</dst>
                 <cost>10</cost>
               </dst-costs>
             </map>
             <map>
               <src>PID3</src>
               <dst-costs>
                 <dst>PID2</dst>
                 <cost>15</cost>
               </dst-costs>
             </map>
           </cost-map>
         </cost-maps>
       </resources>
     </data>
   </rpc-reply>

2.4.6.  Endpoint Property Service in NETCONF

   Last, we consider endpoint property service.  For consistency, we
   consider the same yang module as in Figure 3.  For ease of reading,
   we duplicate the tree diagram here:



Shi, et al.               Expires May 14, 2015                 [Page 35]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   +--ro endpoint-property-map
      +--ro meta
      |  +--ro dependent-vtags*
      |     +--ro resource-id    resource-id
      |     +--ro tag            tag-string
      +--ro endpoint-properties* [endpoint]
         +--ro endpoint      typed-endpoint-address
         +--ro properties* [property-type]
            +--ro property-type    endpoint-property-type
            +--ro property         endpoint-property-value

2.4.6.1.  Approach 1: Using Subtree Filtering

   To retrieve properties of an endpoint with endpoint:INPUT-ENDPOINT-
   1,INPUT-ENDPOINT-2, INPUT-ENDPOINT-p,properties: INPUT-PROPERTY-1,
   INPUT-PROPERTY-2,...,INPUT-PROPERTY-q, the client specifies it in the
   following netconf RPC template:

   <rpc message-id=SEQ-NUM
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <get>
       <filter type="subtree">
         <resources
           xmlns="urn:ietf:params:xml:ns:yang:alto-service-netconf">
           <endpoint-property-map>
             <meta/>
             <endpoint-properties>
               <endpoint>INPUT-ENDPOINT-1</endpoint>
               <properties>
                 <property-type>INPUT-PROPERTY-1</property-type>
                 <property/>
               </properties>
               <properties>
                 <property-type>INPUT-PROPERTY-2</property-type>
                 <property/>
               </properties>
               ...
               <properties>
                 <property-type>INPUT-PROPERTY-q</property-type>
                 <property/>
               </properties>
             </endpoint-properties>
             <endpoint-properties>
               <endpoint>INPUT-ENDPOINT-2</endpoint>
               <properties>
                 <property-type>INPUT-PROPERTY-1</property-type>
                 <property/>
               </properties>



Shi, et al.               Expires May 14, 2015                 [Page 36]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


               <properties>
                 <property-type>INPUT-PROPERTY-2</property-type>
                 <property/>
               </properties>
               ...
               <properties>
                 <property-type>INPUT-PROPERTY-q</property-type>
                 <property/>
               </properties>
             </endpoint-properties>
             ...
             <endpoint-properties>
               <endpoint>INPUT-ENDPOINT-p</endpoint>
               <properties>
                 <property-type>INPUT-PROPERTY-1</property-type>
                 <property/>
               </properties>
               <properties>
                 <property-type>INPUT-PROPERTY-2</property-type>
                 <property/>
               </properties>
               ...
               <properties>
                 <property-type>INPUT-PROPERTY-q</property-type>
                 <property/>
               </properties>
             </endpoint-properties>
           </endpoint-property-map>
         </resources>
       </filter>
     </get>
   </rpc>

   One can observe that in the template, client must list all
   combinations of endpoints and properties to retrieve the cost, which
   is very inefficient when the number of endpoints and/or properties
   grows.

   An example of the query, for properties: myNetMap1.pid, priv:ietf-
   example-prop of endpoints: ipv4:192.0.2.34, ipv4:203.0.113.129, is
   the following:










Shi, et al.               Expires May 14, 2015                 [Page 37]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   <rpc message-id=SEQ-NUM
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <get>
       <filter type="subtree">
         <resources
           xmlns="urn:ietf:params:xml:ns:yang:alto-service-netconf">
           <endpoint-property-map>
             <meta/>
             <endpoint-properties>
               <endpoint>ipv4:192.0.2.34</endpoint>
               <properties>
                 <property-type>myNetMap1.pid</property-type>
                 <property/>
               </properties>
               <properties>
                 <property-type>priv:ietf-example-prop</property-type>
                 <property/>
               </properties>
             </endpoint-properties>
             <endpoint-properties>
               <endpoint>ipv4:203.0.113.129</endpoint>
               <properties>
                 <property-type>myNetMap1.pid</property-type>
                 <property/>
               </properties>
               <properties>
                 <property-type>priv:ietf-example-prop</property-type>
                 <property/>
               </properties>
             </endpoint-properties>
           </endpoint-property-map>
         </resources>
       </filter>
     </get>
   </rpc>

   An example reply from the server then will be:














Shi, et al.               Expires May 14, 2015                 [Page 38]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   <rpc-reply message-id=SEQ-NUM
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <data>
       <resources
         xmlns="urn:ietf:params:xml:ns:yang:alto-service-netconf">
         <endpoint-property-map>
           <meta>
             <dependent-vtags>
               <resource-id>myNetMap1</resource-id>
               <tag>da65eca2tus10ce8b0740a1938e3f8eb1d4785</tag>
             </dependent-vtags>
           </meta>
           <endpoint-properties>
             <endpoint>ipv4:192.0.2.34</endpoint>
             <properties>
               <property-type>myNetMap1.pid</property-type>
               <property>PID1</property>
             </properties>
             <properties>
               <property-type>priv:ietf-example-prop</property-type>
               <property>1</property>
             </properties>
           </endpoint-properties>
           <endpoint-properties>
             <endpoint>ipv4:203.0.113.129</endpoint>
             <properties>
               <property-type>myNetMap1.pid</property-type>
               <property>PID3</property>
             </properties>
           </endpoint-properties>
         </endpoint-property-map>
       </resources>
     </data>
   </rpc-reply>

2.4.6.2.  Approach 2 : Using XPath

   To retrieve properties of an endpoint with endpoint:INPUT-ENDPOINT-
   1,INPUT-ENDPOINT-2,...,INPUT-ENDPOINT-p, properties: INPUT-PROPERTY-
   1, INPUT-PROPERTY-2,...,INPUT-PROPERTY-q, the client specifies it in
   the following netconf RPC template:










Shi, et al.               Expires May 14, 2015                 [Page 39]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


  <rpc message-id=SEQ-NUM
    xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
    <get>
      <filter xmlns:t="urn:ietf:params:xml:ns:yang:alto-service-netconf"
        type="xpath"
        select="/t:resources/t:endpoint-property-map/meta
          | /t:resources/t:endpoint-property-map/t:endpoint-properties
            [t:endpoint=INPUT-ENDPOINT-1 or t:endpoint=INPUT-ENDPOINT-2
              or ...or t:endpoint=INPUT-ENDPOINT-p]/endpoint
          | /t:resources/t:endpoint-property-map/t:endpoint-properties
            [t:endpoint=INPUT-ENDPOINT-1 or t:endpoint=INPUT-ENDPOINT-2
              or ...or t:endpoint=INPUT-ENDPOINT-p]/t:properties
            [t:property-type=INPUT-PROPERTY-1
              or t:property-type=INPUT-PROPERTY-2
              or ... or t:property-type=INPUT-PROPERTY-q]" />
    </get>
  </rpc>

   Similar to the preceding filtered maps templates, this template also
   used XPATH union to select the meta node and endpoint node in the
   output.

   An example of the query, for properties: myNetMap1.pid, priv:ietf-
   example-prop of endpoints: ipv4:192.0.2.34, ipv4:203.0.113.129, is
   the following:

  <rpc message-id=SEQ-NUM
    xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
    <get>
      <filter xmlns:t="urn:ietf:params:xml:ns:yang:alto-service-netconf"
        type="xpath"
        select="/t:resources/t:endpoint-property-map/meta
          | /t:resources/t:endpoint-property-map/t:endpoint-properties
            [t:endpoint="ipv4:192.0.2.34"
              or t:endpoint="ipv4:203.0.113.129"]/endpoint
          | /t:resources/t:endpoint-property-map/t:endpoint-properties
            [t:endpoint="ipv4:192.0.2.34"
              or t:endpoint="ipv4:203.0.113.129"]
            /t:properties[t:property-type="myNetMap1.pid"
              or t:property-type="priv:ietf-example-prop"]" />
    </get>
  </rpc>

   An example reply from the server then will be:







Shi, et al.               Expires May 14, 2015                 [Page 40]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


  <rpc-reply message-id=SEQ-NUM
    xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
    <data>
    <resources xmlns="urn:ietf:params:xml:ns:yang:alto-service-netconf">
        <endpoint-property-map>
          <meta>
            <dependent-vtags>
              <resource-id>myNetMap1</resource-id>
              <tag>da65eca2tus10ce8b0740a1938e3f8eb1d4785</tag>
            </dependent-vtags>
          </meta>
          <endpoint-properties>
            <endpoint>ipv4:192.0.2.34</endpoint>
            <properties>
              <property-type>myNetMap1.pid</property-type>
              <property>PID1</property>
            </properties>
            <properties>
              <property-type>priv:ietf-example-prop</property-type>
              <property>1</property>
            </properties>
          </endpoint-properties>
          <endpoint-properties>
            <endpoint>ipv4:203.0.113.129</endpoint>
            <properties>
              <property-type>myNetMap1.pid</property-type>
              <property>PID3</property>
            </properties>
          </endpoint-properties>
        </endpoint-property-map>
      </resources>
    </data>
  </rpc-reply>

2.4.7.  Other Services and Discussions

2.4.7.1.  Endpoint Cost Service Implementation

   The ALTO Endpoint Cost Service cannot be efficiently implemented
   using NETCONF's standard operations.  The server has to provide its
   own implementation and provide the service as a custom NETCONF RPC
   endpoint-cost-service (Appendix A.4).

2.4.7.2.  IRD Service

   To retrieve the IRD, one could simply use the <get> operation of
   NETCONF, similar to the full map services.  However, the caveat is
   that the content of the IRD must be changed.  Since NETCONF uses a



Shi, et al.               Expires May 14, 2015                 [Page 41]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   persistent connection (e.g., SSH, BEEP, etc.), the URIs in the ALTO
   IRD would not be needed.  The IRD would need to indicate that these
   resources are provided by a NETCONF server and specify the type of
   transport layer it uses.  However, the client would need this
   information to request the IRD in the first place.  Hence, the server
   needs some other mechanism for service discovery.

   One important feature of the ALTO IRD is its ability to delegate (See
   Section 9.2.4. of [RFC7285]).  Although the URI in the IRD of a
   NETCONF server is no longer needed for storing meta information, it
   can be used to delegate--directing the client to another location for
   this particular resource.

2.5.  ALTO/YANG with Integration with RESTCONF

   The RESTCONF Protocol [RESTCONF] provides a RESTful interface to data
   defined in YANG.  RESTCONF must support XML and may support JSON
   encoding.  Since our focus is on retrieving information, the related
   RESTCONF operation is the HTTP GET method.  The POST method is
   relevant when one must define a custom RPC, which is invoked as an
   operation resource through the POST method.

   The only way to specify query parameters in the RESTCONF GET method
   is to encode the parameters in the GET URI.  The relevant encoding
   structure then is:

         GET /<restconf>/<path>?<query>
          ^       ^        ^       ^
          |       |        |       |
        method  entry  resource  query
          M       M        O       O

          M=mandatory, O=optional
          <text> replaced by client with real values

   The particular relevant components are the path component and the
   query component.  The goal of the path component (Section 2.5.1 of
   [RESTCONF]) is to identify a single node (referred to as the target
   resource) in the data tree.  This is different from xpath, whose
   basic Location Path concept is built on node set; that is, the goal
   of xpath is to identify a set of nodes (address parts of an XML
   document), not a single node.  The query component (Section 3.8 of
   [RESTCONF]) consists of a set of "name=value" pairs, with a given set
   of names (query parameters) to control the query behavior.  A
   particularly relevant parameter is select, which allows a client to
   request a subset of the target resource contents.  The exact syntax
   of select is specified in Section 3.8.4 of [RESTCONF].  Note that all




Shi, et al.               Expires May 14, 2015                 [Page 42]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   query parameters are optional to implement by the server and optional
   to use by the client.

2.5.1.  Tree Diagram for ALTO/YANG with RESTCONF

   This model is identical with alto-service-netconf, except for the
   addition of the filtered map service RPCs and endpoint property
   service RPC because of the impossibility to implement those services
   using standard RESTCONF operations.

   module: alto-service-restconf
      +--ro resources
         +--ro IRD
         |  +--ro meta
         |  |  +--ro cost-types* [cost-type-name]
         |  |  |  +--ro cost-type-name    cost-type-name
         |  |  |  +--ro cost-mode         cost-mode
         |  |  |  +--ro cost-metric       cost-metric
         |  |  |  +--ro description?      string
         |  |  +--ro default-alto-network-map    resource-id
         |  +--ro resources* [resource-id]
         |     +--ro resource-id     resource-id
         |     +--ro uri             inet:uri
         |     +--ro media-type      media-type
         |     +--ro accepts*        media-type
         |     +--ro capabilities
         |     |  +--ro cost-constraints?   boolean
         |     |  +--ro cost-type-names*    cost-type-name
         |     |  +--ro prop-types*         endpoint-property-type
         |     +--ro uses*           resource-id
         +--ro network-maps
         |  +--ro network-map* [resource-id]
         |     +--ro resource-id    alto:resource-id
         |     +--ro tag            alto:tag-string
         |     +--ro map* [pid]
         |        +--ro pid                       alto:pid-name
         |        +--ro endpoint-address-group* [address-type]
         |           +--ro address-type       endpoint-address-type
         |           +--ro endpoint-prefix*   endpoint-prefix
         +--ro cost-maps
         |  +--ro cost-map* [resource-id]
         |     +--ro resource-id    alto:resource-id
         |     +--ro tag            alto:tag-string
         |     +--ro meta
         |     |  +--ro dependent-vtags*
         |     |  |  +--ro resource-id    resource-id
         |     |  |  +--ro tag            tag-string
         |     |  +--ro cost-type



Shi, et al.               Expires May 14, 2015                 [Page 43]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


         |     |     +--ro cost-mode      cost-mode
         |     |     +--ro cost-metric    cost-metric
         |     |     +--ro description?   string
         |     +--ro map* [src]
         |        +--ro src          alto:pid-name
         |        +--ro dst-costs* [dst]
         |           +--ro dst     alto:pid-name
         |           +--ro cost
         +--ro endpoint-property-map
            +--ro meta
            |  +--ro dependent-vtags*
            |     +--ro resource-id    resource-id
            |     +--ro tag            tag-string
            +--ro endpoint-properties* [endpoint]
               +--ro endpoint      typed-endpoint-address
               +--ro properties* [property-type]
                  +--ro property-type    endpoint-property-type
                  +--ro property         endpoint-property-value
   rpcs:
      +---x filtered-network-map-service
      |  +--ro input
      |  |  +--ro pids*            alto:pid-name
      |  |  +--ro address-types*   alto:endpoint-address-type
      |  +--ro output
      |     +--ro filtered-network-map-service
      |        +--ro meta
      |        |  +--ro vtag
      |        |     +--ro resource-id    resource-id
      |        |     +--ro tag            tag-string
      |        +--ro network-map* [pid]
      |           +--ro pid                       pid-name
      |           +--ro endpoint-address-group* [address-type]
      |              +--ro address-type       endpoint-address-type
      |              +--ro endpoint-prefix*   endpoint-prefix
      +---x filtered-cost-map-service
      |  +--ro input
      |  |  +--ro cost-type
      |  |  |  +--ro cost-mode      cost-mode
      |  |  |  +--ro cost-metric    cost-metric
      |  |  |  +--ro description?   string
      |  |  +--ro constraints*   alto:constraint
      |  |  +--ro pids
      |  |     +--ro srcs*   alto:pid-name
      |  |     +--ro dsts*   alto:pid-name
      |  +--ro output
      |     +--ro filtered-cost-map-service
      |        +--ro meta
      |        |  +--ro dependent-vtags*



Shi, et al.               Expires May 14, 2015                 [Page 44]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


      |        |  |  +--ro resource-id    resource-id
      |        |  |  +--ro tag            tag-string
      |        |  +--ro cost-type
      |        |     +--ro cost-mode      cost-mode
      |        |     +--ro cost-metric    cost-metric
      |        |     +--ro description?   string
      |        +--ro cost-map* [src]
      |           +--ro src          pid-name
      |           +--ro dst-costs* [dst]
      |              +--ro dst     pid-name
      |              +--ro cost
      +---x endpoint-property-service
      |  +--ro input
      |  |  +--ro properties*   alto:endpoint-property-type
      |  |  +--ro endpoints*    alto:typed-endpoint-address
      |  +--ro output
      |     +--ro endpoint-property-service
      |        +--ro meta
      |        |  +--ro dependent-vtags*
      |        |     +--ro resource-id    resource-id
      |        |     +--ro tag            tag-string
      |        +--ro endpoint-properties* [endpoint]
      |           +--ro endpoint      typed-endpoint-address
      |           +--ro properties* [property-type]
      |              +--ro property-type    endpoint-property-type
      |              +--ro property         endpoint-property-value
      +---x endpoint-cost-service
         +--ro input
         |  +--ro cost-type
         |  |  +--ro cost-mode      cost-mode
         |  |  +--ro cost-metric    cost-metric
         |  |  +--ro description?   string
         |  +--ro constraints*   alto:constraint
         |  +--ro endpoints
         |     +--ro srcs*   alto:typed-endpoint-address
         |     +--ro dsts*   alto:typed-endpoint-address
         +--ro output
            +--ro endpoint-cost-service
               +--ro meta
               |  +--ro cost-type
               |     +--ro cost-mode      cost-mode
               |     +--ro cost-metric    cost-metric
               |     +--ro description?   string
               +--ro endpoint-cost-map* [src]
                  +--ro src          alto:typed-endpoint-address
                  +--ro dst-costs* [dst]
                     +--ro dst     alto:typed-endpoint-address
                     +--ro cost



Shi, et al.               Expires May 14, 2015                 [Page 45]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


2.5.2.  Full Network Map Service Using RESTCONF

   First consider the full network map service.  Mapping Syntax: To
   request a network map with resource-id INPUT-NETWORK-MAP-RESOURCE-ID,
   the RESTCONF client sends the following HTTP request:

   GET /restconf/data/alto-service-restconf:resources/network-maps
     /network-map=INPUT-NETWORK-MAP-RESOURCE-ID?content=all HTTP/1.1
   Host: alto.example.com
   Accept: application/yang.data+json,application/yang.errors+json

   An example query for a network map whose resource-id is myNetMap1 is:

   GET /restconf/data/alto-service-restconf:resources/network-maps
     /network-map=myNetMap1?content=all HTTP/1.1
   Host: alto.example.com
   Accept: application/yang.data+json,application/yang.errors+json

   An example response from a RESTCONF server can be:
































Shi, et al.               Expires May 14, 2015                 [Page 46]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   HTTP/1.1 200 OK
   Date: Mon, 31 Oct 2011 23:59:00 GMT
   Server: example-alto-server
   Cache-Control: no-cache
   Pragma: no-cache
   Content-Type: application/yang.data+json

   {
     "alto-service-restconf:network-map" : {
       "resource-id" : "myNetMap1",
       "tag" : "da65eca2tus10ce8b0740a1938e3f8eb1d4785",
       "map": [
         {
           "pid": "PID1",
           "endpoint-address-group": {
             "address-type": "ipv4",
             "endpoint-prefix": [
               "192.0.2.0/24",
               "198.51.100.0/25"
             ]
           }
         },
         {
           "pid": "PID2",
           "endpoint-address-group": {
             "address-type": "ipv4",
             "endpoint-prefix": ["198.51.100.128/25"]
           }
         },
         {
           "pid": "PID3",
           "endpoint-address-group": [
             {
               "address-type": "ipv4",
               "endpoint-prefix": ["0.0.0.0/0"]
             },
             {
               "address-type": "ipv6",
               "endpoint-prefix": ["::/0"]
             }
           ]
         }
       ]
     }
   }






Shi, et al.               Expires May 14, 2015                 [Page 47]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


2.5.3.  Full Cost Map Service Using RESTCONF

   Then consider the full cost map service.  Mapping Syntax: To request
   a cost map with resource-id INPUT-COST-MAP-RESOURCE-ID, the RESTCONF
   client sends the following HTTP request:

   GET /restconf/data/alto-service-restconf:resources/cost-maps
     /cost-map=INPUT-COST-MAP-RESOURCE-ID?content=all HTTP/1.1
   Host: alto.example.com
   Accept: application/yang.data+json,application/yang.errors+json

   An example query for a cost map whose resource-id is myCostMap1:

   GET /restconf/data/alto-service-restconf:resources/cost-maps
     /cost-map=myCostMap1?content=all HTTP/1.1
   Host: alto.example.com
   Accept: application/yang.data+json,application/yang.errors+json

   An example response from the server will then be:

   HTTP/1.1 200 OK
   Date: Mon, 31 Oct 2011 23:59:00 GMT
   Server: example-alto-server
   Cache-Control: no-cache
   Pragma: no-cache
   Content-Type: application/yang.data+json

   {
     "alto-service-restconf:cost-map" : {
       "resource-id" : "myCostMap1",
       "tag" : "tus10ce8b0740a1938e3f8eb1d4785da65eca2",
       "meta": {
         "dependent-vtags": {
           "resource-id": "myNetMap1",
           "tag": "da65eca2eb7a10ce8b059740b0b2e3f8eb1d4785"
         },
         "cost-type": {
           "cost-mode": "numerical",
           "cost-metric": "routingcost"
         }
       },
       "map": [
         {
           "src": "PID1",
           "dst-costs": [
             {
               "dst": "PID1",
               "cost": "1"



Shi, et al.               Expires May 14, 2015                 [Page 48]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


             },
             {
               "dst": "PID2",
               "cost": "5"
             },
             {
               "dst": "PID3",
               "cost": "10"
             }
           ]
         },
         {
           "src": "PID2",
           "dst-costs": [
             {
               "dst": "PID1",
               "cost": "5"
             },
             {
               "dst": "PID2",
               "cost": "1"
             },
             {
               "dst": "PID3",
               "cost": "15"
             }
           ]
         },
         {
           "src": "PID3",
           "dst-costs": [
             {
               "dst": "PID1",
               "cost": "20"
             },
             {
               "dst": "PID2",
               "cost": "15"
             }
           ]
         }
       ]
     }
   }







Shi, et al.               Expires May 14, 2015                 [Page 49]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


2.5.4.  Impossibility to Encode Filtered Maps and Endpoint Properties
        using Standard RESTCONF Query

   Although the preceding sections provided templates to implement full
   network and cost map services using standard operations in RESTCONF,
   it is not possible to do so for the filtered map services or the
   endpoint property service.

   Specifically, supporting the filtered map services requires the
   ability to select multiple nodes from the data tree based on the data
   content.  Recall that the path component in the uri can return only a
   single node.  Hence, the only component that allows one to select
   multiple nodes is the query component, specifically, the select query
   parameter.  However, the definition of the select expression
   (Section 3.8.4 of [RESTCONF]) only includes terms defined in a
   schema, not any data content (i.e., select does not include any
   content match capabilities).  Hence, it is impossible to implement
   filtered maps.

2.5.5.  A Potential Extension to RESTCONF to Handle Filtered Maps and
        Endpoint Properties Services

   In order to provide filtered map services and endpoint property
   service, we need to enable the "select" query parameter to match
   content.  In particular, we propose to incorporate the list-instance
   from the "path" component, which identifies an instance (element) in
   the list by its key(s).

   The original ABNF grammar for the select query expression is defined
   in Section 3.8.4 of [RESTCONF]:

   select-expr = path '(' select-expr / '*' ')' /
                 path ';' select-expr /
                 path
   path = api-identifier [ '/' path ]

   Our proposed extension is the following, where list-instance is
   defined in Section 2.5.1.1 of [RESTCONF].  To avoid ambiguity, the
   key-value string MUST not contain left parenthesis '(', right
   parenthesis ')', semi-colon ';', asterisk '*', or comma ','.

   select-expr = path '(' select-expr / '*' ')' /
                 path ';' select-expr /
                 path
   path = (api-identifier | list-instance) [ '/' path ]
   list-instance = api-identifier "=" key-value ["," key-value]*
   key-value = string




Shi, et al.               Expires May 14, 2015                 [Page 50]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


2.5.5.1.  Filtered Network Map Service with Proposed RESTCONF select
          Extension

   To request INPUT-PID-1, INPUT-PID-2, ..., INPUT-PID-k of the network
   map with resource-id INPUT_NETWORK_MAP_RESOURCE_ID, the RESTCONF
   client may send a request using the following template:

   GET /restconf/data/resources/network-maps/
     network-map=INPUT_NETWORK_MAP_RESOURCE_ID?select=resource-id;tag;
     map=INPUT-PID-1;map=INPUT-PID-2;...;map=INPUT-PID-k
     &content=all HTTP/1.1
   Host: alto.example.com
   Accept: application/yang.data+json,application/yang.errors+json

   For example, to request PID1 and PID3 of the network map whose
   resource-id is myNetMap1, the RESTCONF client may send the following
   request:

   GET /restconf/data/resources/network-maps/network-map=myNetMap1
     ?select=resource-id;tag;map=PID1;map=PID3&content=all HTTP/1.1
   Host: alto.example.com
   Accept: application/yang.data+json,
           application/yang.errors+json

   The expected response will then be:


























Shi, et al.               Expires May 14, 2015                 [Page 51]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   HTTP/1.1 200 OK
   Date: Mon, 31 Oct 2011 23:59:00 GMT
   Server: example-alto-server
   Cache-Control: no-cache
   Pragma: no-cache
   Content-Type: application/yang.data+json

   {
     "alto-service-restconf:network-map" : {
       "resource-id" : "myNetMap1",
       "tag" : "da65eca2tus10ce8b0740a1938e3f8eb1d4785",
       "map" : [
         {
           "pid": "PID1",
           "endpoint-address-group": {
             "address-type": "ipv4",
             "endpoint-prefix": [
               "192.0.2.0/24",
               "198.51.100.0/25"
             ]
           }
         },
         {
           "pid": "PID3",
           "endpoint-address-group": [
             {
               "address-type": "ipv4",
               "endpoint-prefix": ["0.0.0.0/0"]
             },
             {
               "address-type": "ipv6",
               "endpoint-prefix": ["::/0"]
             }
           ]
         }
       ]
     }
   }

2.5.5.2.  Filtered Cost Map Service with Proposed RESTCONF select
          Extension

   To request costs from INPUT-SRC-PID-1, INPUT-SRC-PID-2, ..., INPUT-
   SRC-PID-p to INPUT-DST-PID-1, INPUT-DST-PID-2, ..., INPUT-DST-PID-q
   in the cost map with resource-id INPUT_COST_MAP_RESOURCE_ID, the
   RESTCONF client may send a request using the following template:





Shi, et al.               Expires May 14, 2015                 [Page 52]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   GET /restconf/data/resources/cost-maps
     /cost-map=INPUT_COST_MAP_RESOURCE_ID
     ?select=resource-id;tag;meta;
     map=INPUT-SRC-PID-1(src;
       dst-costs=INPUT-DST-PID-1;
       dst-costs=INPUT-DST-PID-2;
       ...;
       dst-costs=INPUT-DST-PID-q);
     map=INPUT-SRC-PID-2(src;
       dst-costs=INPUT-DST-PID-1;
       dst-costs=INPUT-DST-PID-2;
       ...;
       dst-costs=INPUT-DST-PID-q);
     ...;
     map=INPUT-SRC-PID-p(src;
       dst-costs=INPUT-DST-PID-1;
       dst-costs=INPUT-DST-PID-2;
       ...;
       dst-costs=INPUT-DST-PID-q)
     &content=all HTTP/1.1
   Host: alto.example.com
   Accept: application/yang.data+json,application/yang.errors+json

   To request the costs from sources PID1 and PID3 to destinations PID2
   and PID3 of the cost map whose resource-id is myCostMap1, the
   RESTCONF client may send the following request:

   GET /restconf/data/resources/cost-maps/cost-map=myCostMap1
     ?select=resource-id;tag;meta;
     map=PID1(src;dst-costs=PID2;dst-costs=PID3);
     map=PID3(src;dst-costs=PID2;dst-costs=PID3)
     &content=all HTTP/1.1
   Host: alto.example.com
   Accept: application/yang.data+json,application/yang.errors+json

   The expected response will then be:















Shi, et al.               Expires May 14, 2015                 [Page 53]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   HTTP/1.1 200 OK
   Date: Mon, 31 Oct 2011 23:59:00 GMT
   Server: example-alto-server
   Cache-Control: no-cache
   Pragma: no-cache
   Content-Type: application/yang.data+json

   {
     "alto-service-restconf:cost-map" : {
       "resource-id" : "myCostMap1",
       "tag" : "tus10ce8b0740a1938e3f8eb1d4785da65eca2",
       "meta" : {
         "dependent-vtags" : {
           "resource-id" : "myNetMap1",
           "tag" : "da65eca2tus10ce8b0740a1938e3f8eb1d4785"
         }
       },
       "map" : [
         {
           "src": "PID1",
           "dst-costs": [
             {
               "dst": "PID2",
               "cost": "5"
             },
             {
               "dst": "PID3",
               "cost": "10"
             }
           ]
         },
         {
           "src": "PID3",
           "dst-costs": [
             {
               "dst": "PID2",
               "cost": "15"
             }
           ]
         }
       ]
     }
   }








Shi, et al.               Expires May 14, 2015                 [Page 54]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


2.5.5.3.  Endpoint Property Service with Proposed RESTCONF select
          Extension

   To retrieve properties of an endpoint with endpoint:INPUT-ENDPOINT-
   1,INPUT-ENDPOINT-2, INPUT-ENDPOINT-p,properties: INPUT-PROPERTY-1,
   INPUT-PROPERTY-2,...,INPUT-PROPERTY-q, the client specifies it in the
   following netconf RPC template:

   GET /restconf/data/resources/endpoint-property-map
     ?select=meta;
     endpoint-properties=INPUT-ENDPOINT-1(endpoint;
       properties=INPUT-PROPERTY-1;
       properties=INPUT-PROPERTY-2;
       ...;
       properties=INPUT-PROPERTY-q);
     endpoint-properties=INPUT-ENDPOINT-2(endpoint;
       properties=INPUT-PROPERTY-1;
       properties=INPUT-PROPERTY-2;
       ...;
       properties=INPUT-PROPERTY-q);
     ...;
     endpoint-properties=INPUT-ENDPOINT-p(endpoint;
       properties=INPUT-PROPERTY-1;
       properties=INPUT-PROPERTY-2;
       ...;
       properties=INPUT-PROPERTY-q)
     &content=all HTTP/1.1
   Host: alto.example.com
   Accept: application/yang.data+json,application/yang.errors+json

   An example of the query, for properties: myNetMap1.pid, priv:ietf-
   example-prop of endpoints: ipv4:192.0.2.34, ipv4:203.0.113.129, is
   the following:

   GET /restconf/data/resources/endpoint-property-map
     ?select=meta;
     endpoint-properties=ipv4:192.0.2.34(endpoint;
       properties=myNetMap1.pid;
       properties=priv:ietf-example-prop);
     endpoint-properties=ipv4:203.0.113.129(endpoint;
       properties=myNetMap1.pid;
       properties=priv:ietf-example-prop)
     &content=all HTTP/1.1
   Host: alto.example.com
   Accept: application/yang.data+json,application/yang.errors+json

   The expected response will then be:




Shi, et al.               Expires May 14, 2015                 [Page 55]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   HTTP/1.1 200 OK
   Date: Mon, 31 Oct 2011 23:59:00 GMT
   Server: example-alto-server
   Cache-Control: no-cache
   Pragma: no-cache
   Content-Type: application/yang.data+json

   {
     "alto-service-restconf:endpoint-property-map" : {
       "meta" : {
         "dependent-vtags" : [
           {
             "resource-id" : "myNetMap1",
             "tag" : "da65eca2tus10ce8b0740a1938e3f8eb1d4785"
           }
         ]
       },
       "endpoint-properties" : [
         {
           "endpoint": "ipv4:192.0.2.34",
           "properties": [
             {
               "property-type": "myNetMap1.pid",
               "property": "PID1"
             },
             {
               "property-type": "priv:ietf-example-prop",
               "property": "1"
             }
           ]
         },
         {
           "endpoint": "ipv4:203.0.113.129",
           "properties": [
             {
               "property-type": "myNetMap1.pid",
               "property": "PID3"
             }
           ]
         }
       ]
     }
   }








Shi, et al.               Expires May 14, 2015                 [Page 56]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


2.5.6.  Other Services and Discussions

2.5.6.1.  Endpoint Cost Service

2.5.6.2.  IRD Service

3.  Non-Trivial Specification Efforts

3.1.  YANG Expressiveness Issues

3.1.1.  Limitation on Modeling JSON key-value store

   ALTO is a JSON based protocol and makes extensive use of JSON key-
   value store, which is useful because of its efficiency, inherent
   uniqueness constraint on the keys, and its natural correspondence to
   and from structures such as indexed database tables or hashmaps.

   For example, the network map is defined as mapping from a PID to an
   endpoint address group.  Here is an example network map in
   Section 11.2.1.7 of [RFC7285].

   "network-map" : {
     "PID1" : {
       "ipv4" : [
         "192.0.2.0/24",
         "198.51.100.0/25"
       ]
     },
     "PID2" : {
       "ipv4" : [
         "198.51.100.128/25"
       ]
     },
     "PID3" : {
       "ipv4" : [
         "0.0.0.0/0"
       ],
       "ipv6" : [
         "::/0"
       ]
     }
   }

   As pointed out in [draft-shi-alto-yang-json], such JSON objects
   cannot be modeled in YANG.  To achieve the semantical equivalence, we
   took the approach of modeling it as a "list" with a unique index
   ("key) in YANG.




Shi, et al.               Expires May 14, 2015                 [Page 57]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   list network-map {
     key "pid";
     leaf pid {
       type string;
     }
     list endpoint-address-group {
       key address-type;
       leaf address-type {
         type endpoint-address-type;
       }
       leaf-list endpoint-prefix {
         type endpoint-prefix;
       }
     }
   }

   According to [draft-ietf-netmod-yang-json], the above YANG model
   correspond to the following JSON text:

































Shi, et al.               Expires May 14, 2015                 [Page 58]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   "network-map": [
     {
       "pid": "PID1",
       "endpoint-address-group": {
         "address-type": "ipv4",
         "endpoint-prefix": [
           "192.0.2.0/24",
           "198.51.100.0/25"
         ]
       }
     },
     {
       "pid": "PID2",
       "endpoint-address-group": {
         "address-type": "ipv4",
         "endpoint-prefix": ["198.51.100.128/25"]
       }
     },
     {
       "pid": "PID3",
       "endpoint-address-group": [
         {
           "address-type": "ipv4",
           "endpoint-prefix": ["0.0.0.0/0"]
         },
         {
           "address-type": "ipv6",
           "endpoint-prefix": ["::/0"]
         }
       ]
     }
   ]

   We immediately notice a few disadvantages.

   (1)  From the YANG validated JSON message alone, it is unclear that
        the "pid" field is the key to the list "network-map";

   (2)  The YANG-validated JSON message is much more verbose, which
        increases the payload, especially when the model scales.

   (3)  The consistency between address-type and endpoint-prefix is not
        enforced in the above YANG model.








Shi, et al.               Expires May 14, 2015                 [Page 59]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


3.1.2.  Limits of Leafrefs

   Leafrefs in YANG are heavily tied with XML and XPATH expressions.
   However, leafrefs cannot refer to an rpc node (or structures within a
   rpc node).  For example, referring to the input parameters in rpc
   input from rpc output could be very useful.

3.2.  Extensibility Issues

3.2.1.  String Pattern Extensibility

   For string types that have inherant relationships (e.g., extension,
   concatenation), it is useful to be able to extend the patterns of the
   strings for modularity and extensibility.  For example,
   TypedEndpointAddress in [RFC7285] is defined as a string of the
   format AddressType, followed by the ':' separator, followed by a ip-
   address EndpointAddress.  Definitions of the pattern of an ip-address
   is readily available in Common YANG Data Types [RFC6991].  It is not
   possible in YANG to inherit, extend, or refer to a pattern of a
   different string type.  Another example is the resource-specific
   endpoint property, which is defined as a resource ID, followed by the
   '.' separator (U+002E), followed by a name obeying the same rules as
   for global endpoint property names.

3.2.2.  Type Extensibility

   YANG is unable to augment a typedef or enum type.  Hence there is not
   a good way to add a cost metric or type of address if the model is
   fixed.

4.  Applications of ALTO/YANG

4.1.  Other Applications

4.1.1.  Verifier/Validator on the Client Side

   Using tools like pyang (https://code.google.com/p/pyang/), we can not
   only validate the YANG module, but also translate the module to DSDL
   schema and validate instance documents.  The limitation is that pyang
   can only validate XML files and the JSON-XML translation is not well-
   defined.  We provide a few examples of pyang-validated ALTO messages
   in the appendix.

4.1.2.  Code Generator

   OpenDayLight (ODL) provides automatic code generation for YANG
   models.  ODL yangtools generates a Java OSGi bundle for a given YANG
   module, including typedefs and groupings, data instances, and RPCs.



Shi, et al.               Expires May 14, 2015                 [Page 60]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   One may integrate this bundle in the ODL controller which provides
   JSON parser and a RESTful API for the YANG RPCs.  The datastore is
   automatically created and managed by ODL as well.  The only manual
   code needed are the bundle activators and the server computation
   implementation.

5.  Security Considerations

   This document does not introduce security or privacy concerns.

6.  IANA Considerations

   This document does not have IANA considerations.

7.  References

   [RFC7159]  Bray, T., "The JavaScript Object Notation (JSON) Data
              Interchange Format", RFC 7159, March 2014.

   [RFC6241]  Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,
              and A. Bierman, Ed., "Network Configuration Protocol
              (NETCONF)", RFC 6241, June 2010.

   [RFC7285]  Almi, R., Penno, R., Yang, Y., Kiesel, S., Previdi, S.,
              Roome, W., Shalunov, S., and R. Woundy, "Application-Layer
              Traffic Optimization (ALTO) Protocol", RFC 7285, September
              2014.

   [RFC6020]  Bjorklund, M., Ed., "YANG - A Data Modeling Language for
              the Network Configuration Protocol (NETCONF)", RFC 6020,
              October 2010.

   [RFC6991]  Schoenwaelder, J., Ed., "Common YANG Data Types", RFC
              6020, October 2010.

   [draft-ietf-netmod-yang-json]
              Lhotka, L., "JSON Encoding of Data Modeled with YANG",
              draft-ietf-netmod-yang-json-01 (work in progress), October
              2014.

   [draft-shi-alto-yang-json]
              Shi, X. and Y. Yang, "Modeling JSON Messages Using YANG",
              draft-shi-alto-yang-json-00 (work in progress), October
              2014.







Shi, et al.               Expires May 14, 2015                 [Page 61]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   [RESTCONF]
              Bierman, A., Bjorklund, M., and K. Watsen, "RESTCONF
              Protocol", draft-ietf-netconf-restconf-03 (work in
              progress), October 2014.

Appendix A.  YANG Data Model for ALTO Protocol

A.1.  ALTO/YANG: Common Data Types

module alto-service-types {
  yang-version 1;

  namespace "urn:ietf:params:xml:ns:yang:alto-service-types";
  // TODO: replace with IANA namespace when assigned

  prefix "alto";

  import ietf-inet-types {
    prefix inet;
  }

  organization "ALTO WG";
  contact "alto@ietf.org";

  description
    "This module defines the data types and groupings for a semantically
     equivalent data model for the ALTO services defined in RFC7285.";

  revision 2014-11-01 {
    description "Separate types module";
  }

  revision 2014-10-24 {
    description "Initial version.";
  }

  /********************
   * TYPE DEFINITIONS *
   ********************/

  /***********************************************************
    Definitions for addresses

    ALTO RFC7285 uses the following addresses, as shown in the
    examples below:

     - Endpoint property service (Sec. 11.4.1.7):
       "endpoints"  : [ "ipv4:192.0.2.34",



Shi, et al.               Expires May 14, 2015                 [Page 62]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


                        "ipv4:203.0.113.129" ]
     - Endpoint cost service (Sec. 11.5.1.7):
       "endpoints" : {
       "srcs": [ "ipv4:192.0.2.2" ],
       "dsts": [
         "ipv4:192.0.2.89",
         "ipv4:198.51.100.34",
         "ipv4:203.0.113.45"
     - Network map (Sec. 11.2.1.7.):
         "ipv4": [
           "192.0.2.0/24",
           "198.51.100.0/25"
         ],
         "ipv6": [
           "2001:db8:0:1::/64",
           "2001:db8:0:2::/64"
         ]

   To handle the proceeding, we need the following definitions:
      ipv4-address (e.g., 192.0.2.0, already defined in rfc6991),
      ipv6-address (already defined in rfc6991),
      ipv4-prefix (e.g., 192.0.2.0/24, already defined in rfc6991),
      ipv6-prefix (defined in rfc6991),
      typed-ipv4-address (e.g., ipv4:192.0.2.1, to be defined below)
      typed-ipv6-address
      typed-ipv4-prefix-list (e.g., "ipv4": [
           "192.0.2.0/24",
           "198.51.100.0/25"
         ],

  *******************************************************************/

  /*
     First define typed-ipv4-address and typed-ipv6-address, as used
     by endpoint services.

     The ideal case is to define it as "ipv4:"+ipv4-address, but there
     is not such a type constructor (YANG EXTENSION).  Hence, the
     current definition cuts-and-pastes (i.e., repeats verbatim) the
     definition of ipv4-address and prepend "ipv4:". The downside is
     that if someone redefines ipv4-address, there could be
     inconsistency.
   */

  typedef typed-ipv4-address {
    type string {
        pattern
          'ipv4:(([0-9]|[1-9][0-9]|1[0-9][0-9]|'



Shi, et al.               Expires May 14, 2015                 [Page 63]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


        + '2[0-4][0-9]|25[0-5])\.){3}'
        + '([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'
        + '(%[\p{N}\p{L}]+)?';
      }
  }


  typedef typed-ipv6-address {
    type string {
      pattern 'ipv6:((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}'
            + '((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|'
            + '(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}'
            + '(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))'
            + '(%[\p{N}\p{L}]+)?';
      pattern 'ipv6:(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|'
            + '((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)'
            + '(%.+)?';
    }
  }

  typedef typed-endpoint-address {
    type union {
      type typed-ipv4-address;
      type typed-ipv6-address;
      // EXTENSION: ADD NEW TYPE HERE.
    }
    description
      "Ref: RFC7285 Sec. 10.4.1 Typed Endpoint Addresses" +
      "= AddressType:EndpointAddr";
  }

  /* Next, we define endpoint address group, as used in the definition
     of ALTO network maps. Specifically, an endpoint address group in
     ALTO is defined as a key-value store, with address type as key,
     and an array of prefix as the value of each key:

     EndpointAddrGroup. RFC7285 Sec. 10.4.5." +
       object-map {
       AddressType -> endpoint-prefix<0..*>;
     } EndpointAddrGroup;

     There are two challenges:

     1) To specify that AddressType is key, we must use the list type,
     which is the only type that one can specify key. However, the
     current JSON-YANG encoding generates an array, instead of a
     key-value map;




Shi, et al.               Expires May 14, 2015                 [Page 64]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


     2) Ideally, we want to enforce address type and prefix
     consistency; for example, an ipv6 prefix in an ipv4 type should
     not be allowed. However, we encounter problems. We leave this as
     an OPEN ISSUE.
  */

  typedef endpoint-address-type {
    type union {
      type enumeration {
        enum ipv4;
        enum ipv6;
        // EXTENSION: ADD NEW TYPE HERE
      }
    }
    description
      "Ref: RFC7285 Sec 2.2.";
  }

  typedef endpoint-prefix {
    type inet:ip-prefix;
    description
      "endpoint prefix, identical to ip-prefix defined in RFC6991.";
  }

  grouping endpoint-address-group {
    list endpoint-address-group {
      key address-type;
      leaf address-type {
        type endpoint-address-type;
        mandatory true;
      }
      leaf-list endpoint-prefix {
        type endpoint-prefix;
      }
    }
    description
      "EndpointAddrGroup. RFC7285 Sec. 10.4.5." +
      " object-map {
          AddressType -> endpoint-prefix<0..*>;
        } EndpointAddrGroup;";
  }

  /**************************************************************
   * Definitions for IDs and names
   *
   * ALTO defines the following concepts that are names and IDs:
   *
   *   pid name (used in network map, cost map),



Shi, et al.               Expires May 14, 2015                 [Page 65]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   *   resource IDs (used to identify alto network/cost maps),
   *   version tag (used to indicate uniqueness of resource),
   *   cost-type-name (used in IRD),
   *   cost-metric,
   *   cost-mode
   *
   * We group their definitions together below.
   **************************************************************/

  typedef valid-id-string {
    type string {
      length "1..64";
      pattern "[0-9a-zA-Z_\-:@\.]+";
    }
    description
      "Type for valid ID strings.";
  }

  typedef tag-string {
    type string {
      length "1..64";
      pattern "[!-~]+";
    }
    description
      "Tag. RFC7285 Sec. 10.3. U+0021-U+007E";
  }

  typedef pid-name {
    type valid-id-string;
    description
      "Name for the PID." +
      "RFC7285, Section 10.1. Note: the '.' separator MUST NOT be" +
      "used unless specifically indicated in RFC7285 or an" +
      " extension document.";
  }

  typedef resource-id {
    type valid-id-string;
    description
      "Resource-ID.";
  }

  grouping vtag {
    leaf resource-id {
      type resource-id;
      mandatory true;
    }
    leaf tag {



Shi, et al.               Expires May 14, 2015                 [Page 66]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


      type tag-string;
      mandatory true;
    }
    description
      "Version tag. Both resource-id and tag must be equal
       byte-for-byte. RFC7285 Sec. 10.3." +
      " object {
          ResourceID resource-id;
          JSONString tag;
        } VersionTag;";
  }

  grouping dependent-vtags {
    list dependent-vtags {
      uses vtag;
      min-elements 1;
    }
  }

 /*************************************
    Definitions for cost type and cost types

    In ALTO, a cost type consists of two required components:

      cost-metric,
      cost-mode
      and an optional description component.

    In the IRD, one can name each cost type. Such info is collected
    in a hash map called cost types.
  *************************************/

  typedef cost-metric {
    type union {
      type enumeration {
        enum routingcost {
          description
          "Default metric. MUST support. RFC7285 Sec. 6.1.1.1.";
        }
        enum hopcount {
          description
          "Hopcount metric.";
        }
        // EXTENSION: Additional cost-metric will be defined here.
      }
      type string {
        length 1..32;
        pattern "priv:[0-9a-zA-Z_\-:\.]+";



Shi, et al.               Expires May 14, 2015                 [Page 67]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


      }
    }
    description
      "Cost metric. for type string,
      'priv:' reserved for Private Use.";
  }

  typedef cost-mode {
    type enumeration {
      enum numerical {
        description
          "Numerical cost mode.";
      }
      enum ordinal {
        description
          "Ordinal cost mode.";
      }
      // EXTENSION: Additional cost-mode will be defined here.
    }
    description
      "Cost mode. MUST support at least one of numerical and ordinal";
  }

  grouping cost-type {
    leaf cost-mode {
      type cost-mode;
      mandatory true;
      description
        "Cost mode.";
    }
    leaf cost-metric {
      type cost-metric;
      mandatory true;
      description
        "Cost metric.";
    }
    leaf description {
      type string;
      description
        "Optional description field.";
    }
    description
      "Cost type. RFC7285 Sec. 10.7." +
      " object {
          CostMetric cost-metric;
          CostMode   cost-mode;
          [JSONString description;]
        } CostType;";



Shi, et al.               Expires May 14, 2015                 [Page 68]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


  }

  typedef cost-type-name {
    type valid-id-string;
    // NOTE: not fully specified in RFC7285, default as valid id
  }

  grouping cost-types {
    list cost-types {
      key cost-type-name;
      leaf cost-type-name {
        type cost-type-name;
      }
      uses cost-type;
    }
    description
      "RFC 7285 Sec. 9.2.2." +
      "object-map {
         JSONString -> CostType;
       } IRDMetaCostTypes;";
  }


  /**************************************
  * Definitions for endpoint properties *
  **************************************/
  typedef global-endpoint-property {
    type union {
      type enumeration {
        enum pid {
          description "PID property.";
        }
        // EXTENSION: other options here
      }
      type string {
        pattern "priv:[\w\-:@]+";
      }
    }
    description
      "Global endpoint property. RFC7285 Sec. 10.8.2." +
      "'priv:' for Private Use " +
      " length 1..32; '.' is not allowed";
  }

  /*
   * Ideally we would want to extend the typedef of resource-id and
   * global endpoint properties, however, YANG 1.0 does not allow
   * that, hence we simply copied the regex for resource-id over



Shi, et al.               Expires May 14, 2015                 [Page 69]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   * verbatim.
   */

  typedef resource-specific-endpoint-property {
    type string {
      length "3..97"; //len(resource-id) + 1 + len(global-property)
      pattern "(priv:)?[\w\-:@\.]+\.[\w\-:_]+"; // resource-id.property
    }
    description
      "Resource-specific endpoint property.";
  }

  typedef endpoint-property-type {
    type union {
      type resource-specific-endpoint-property;
      type global-endpoint-property;
    }
    description
      "Endpoint property type. RFC7285 Sec. 10.8.";
  }

  typedef endpoint-property-value {
    type string;
    description
      "Endpoint property (value).";
  }

 /*************************************
  * Definitions for response header
  *************************************/

  typedef media-type {
    type union {
      type string {
        pattern "application/alto\-.*";
      }
      type enumeration {
        enum alto-directory+json;
        enum alto-networkmap+json;
        enum alto-networkmapfilter+json;
        enum alto-costmap+json;
        enum alto-costmapfilter+json;
        enum alto-endpointprop+json;
        enum alto-endpointpropparams+json;
        enum alto-endpointcost+json;
        enum alto-endpointcostparams+json;
        enum alto-error+json;
      }



Shi, et al.               Expires May 14, 2015                 [Page 70]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


    }
  }

  grouping alto-cost {
    anyxml cost {
      mandatory true;
      description
        "ALTO cost is a JSONValue, which could be
        an object, array, string, etc. (Ref: RFC 7159 Sec.3.)";
    }
  }

  typedef constraint {
    type string {
      pattern "(gt|ge|lt|le|eq) [0-9]+";
    }
    description
      "RFC7285 Sec. 11.3.2.3. The second part must be in the" +
      "same unit as cost-metric, IEEE 754 2008 floating point.";
  }

  /******************************************
    Groupings for ALTO information resource
  *******************************************/

  /* meta */
  grouping IRD-meta {
    uses cost-types;
    leaf default-alto-network-map {
      type resource-id;
      mandatory true;
    }
  }

  grouping network-map-meta {
    container vtag {
      uses vtag;
    }
  }

  grouping cost-map-meta {
    uses dependent-vtags {
      refine dependent-vtags {
        max-elements 1;
      }
    }
    container cost-type {
      uses cost-type;



Shi, et al.               Expires May 14, 2015                 [Page 71]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


    }
  }

  grouping endpoint-property-meta {
    uses dependent-vtags;
  }

  /* accepts (optional) */
  grouping accepts {
    leaf-list accepts {
      type media-type;
      min-elements 1;
    }
  }

  /* capabilities (capabilities) */
  grouping IRD-capabilities {
    container capabilities {
      leaf cost-constraints {
        type boolean;
      }
      leaf-list cost-type-names {
        type cost-type-name;
      }
      leaf-list prop-types {
        type endpoint-property-type;
      }
    }
  }

  /* uses (optional) */
  grouping uses {
    leaf-list uses {
      type resource-id;
      min-elements 1;
    }
  }

  /* Information Resource Directory Grouping */
  grouping IRD {
    container meta {
      uses IRD-meta;
    }
    uses IRD-data;
  }

  grouping IRD-data {
    list resources {



Shi, et al.               Expires May 14, 2015                 [Page 72]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


      key resource-id;
      leaf resource-id {
        type resource-id;
        mandatory true;
      }
      leaf uri {
        type inet:uri;
        mandatory true;
      }
      leaf media-type {
        type media-type;
        mandatory true;
      }
      uses accepts {
        when "current()";
      }
      uses IRD-capabilities {
        when "current()";
      }
      uses uses {
        when "current()";
      }
      description
        "IRDResourceEntry. RFC7285 9.2.2." +
        " object {
            JSONString      uri;
            JSONString      media-type;
            [JSONString     accepts;]
            [Capabilities   capabilities;]
            [ResourceID     uses<0..*>;]
          } IRDResourceEntry;" +
        "IRDResourceEntries. RFC7285 9.2.2." +
        " object-map {
            ResourceID  -> IRDResourceEntry;
          } IRDResourceEntries;" +
        "InformationResourceDirectory. RFC7285 9.2.2." +
        " object {
            IRDResourceEntries resources;
          } InfoResourceDirectory : ResponseEntityBase;";
    }
  }

  /* Network Map Grouping */
  grouping network-map {
    container meta {
      uses network-map-meta;
    }
    uses network-map-data;



Shi, et al.               Expires May 14, 2015                 [Page 73]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


  }

  grouping network-map-data {
    list network-map {
      key "pid";
      leaf pid {
        type pid-name;
      }
      uses endpoint-address-group;
      description
        "RFC7285 Sec. 11.2.1.6." +
        " object-map {
            PIDName -> EndpointAddrGroup;
          } NetworkMapData;";
    }
    description
      "Network map. RFC7285 Sec. 11.2.1.6." +
      "object {
         NetworkMapData network-map;
       } InfoResourceNetworkMap : ResponseEntityBase;";
  }

  /* Cost Map Grouping */
  grouping cost-map {
    container meta {
      uses cost-map-meta;
    }
    uses cost-map-data;
  }

  grouping cost-map-data {
    list cost-map {
      leaf src {
        type pid-name;
        description
          "Source PID.";
      }
      key "src";
      list dst-costs {
        leaf dst {
          type pid-name;
          description
            "Destination PID.";
        }
        key "dst";
        uses alto-cost {
          description
            "Cost from source to destination.";



Shi, et al.               Expires May 14, 2015                 [Page 74]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


        }
        description
          "The list represents the inner part of the cost matrix." +
          "DstCosts. RFC7285 Sec. 11.2.3.6." +
          " object-map {
              PIDName -> JSONValue;
            } DstCosts;";
      }
      description
        "The list represents the outer part of the cost matrix." +
        "CostMapData. RFC7285 Sec. 11.2.3.6." +
        " object-map {
            PIDName -> DstCosts;
          } CostMapData;";
    }
    description
      "Cost map. RFC7285 Sec. 11.2.3.6." +
      " object {
          CostMapData cost-map;
        } InfoResourceCostMap : ResponseEntityBase;";
  }

  /* Endpoint Property Map Grouping */
  grouping endpoint-property-map {
    container meta {
      uses endpoint-property-meta;
    }
    uses endpoint-property-map-data;
  }

  grouping endpoint-property-map-data {
    list endpoint-properties {
      key endpoint;
      leaf endpoint {
        type typed-endpoint-address;
        mandatory true;
      }
      list properties {
        key property-type;
        leaf property-type {
          type endpoint-property-type;
          mandatory true;
        }
        leaf property {
          type endpoint-property-value;
          mandatory true;
        }
        description



Shi, et al.               Expires May 14, 2015                 [Page 75]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


          "EndpointProps. RFC7285 Sec. 11.4.1.6." +
          " object {
              EndpointPropertyType -> JSONValue;
            } EndpointProps;";
      }
      description
        "EndpointPropertyMapData. Sec. 11.4.1.6." +
        " object-map {
            TypedEndpointAddr -> EndpointProps;
          } EndpointPropertyMapData;";
    }
    description
      "InfoResourceEndpointProperties. Sec. 11.4.1.6." +
      " object {
          EndpointPropertyMapData endpoint-properties;
        } InfoResourceEndpointProperties : ResponseEntityBase;";
  }
}

A.2.  ALTO/YANG: RPC Only

module alto-service-rpc {
  yang-version 1;

  namespace "urn:ietf:params:xml:ns:yang:alto-service-rpc";
  // TODO: replace with IANA namespace when assigned

  prefix "as-rpc";

  import alto-service-types {
    prefix alto;
  }

  organization "ALTO WG";
  contact "alto@ietf.org";

  description
    "This module defines the RPCs for a semantically equivalent
    data model for the ALTO services defined in RFC7285.";

  revision 2014-11-09 {
    description "Change rpc inputs for full/filtered map services.";
  }

  revision 2014-11-01 {
    description "Importing from alto-service-types.";
  }




Shi, et al.               Expires May 14, 2015                 [Page 76]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


  revision 2014-10-24 {
    description "Initial version.";
  }

  /************************************
   * RPCs                             *
   ************************************/

  rpc IRD-service {
    output {
      container IRD-service {
        uses alto:IRD;
      }
    }
  }

  rpc network-map-service {
    output {
      container network-map-service {
        uses alto:network-map;
      }
    }
  }

  rpc cost-map-service {
    output {
      container cost-map-service {
        uses alto:cost-map;
      }
    }
  }

  rpc filtered-network-map-service {
    description
      "inquiries on filtered network map" +
      "ReqFilteredNetworkMap. RFC7285 Sec. 11.3.1.3." +
        " object {
            PIDName pids<0..*>;
            [AddressType address-types<0..*>;]
          } ReqFilteredNetworkMap;";
    input {
      leaf-list pids {
        must "current()";
        type alto:pid-name;
      }
      leaf-list address-types {
        type alto:endpoint-address-type;
      }



Shi, et al.               Expires May 14, 2015                 [Page 77]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


    }
    output {
      container filtered-network-map-service {
        uses alto:network-map;
      }
    }
  }

  rpc filtered-cost-map-service {
    input {
      container cost-type {
        must "current()";
        uses alto:cost-type;
      }
      leaf-list constraints {
        type alto:constraint;
        description
          "RFC7285 Sec. 11.3.2.3.";
      }
      container pids {
        leaf-list srcs {
          type alto:pid-name;
          description
            "Source endpoint addresses.";
        }
        leaf-list dsts {
          type alto:pid-name;
          description
            "Destination endpoint addresses.";
        }
        description
          "PIDFilter: Endpoint addresses. RFC7285 Sec. 11.3.2.3." +
          " object {
              PIDName srcs<0..*>;
              PIDName dsts<0..*>;
            } PIDFilter;";
      }
    }
    output {
      container filtered-cost-map-service {
        uses alto:cost-map;
      }
    }
  }

  rpc endpoint-property-service {
    description
      "inquiries on properties of an endpoint" +



Shi, et al.               Expires May 14, 2015                 [Page 78]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


      " object {
            EndpointPropertyType  properties<1..*>;
            TypedEndpointAddr     endpoints<1..*>;
          } ReqEndpointProp;";
    input {
      leaf-list properties {
        type alto:endpoint-property-type;
        min-elements 1;
      }
      leaf-list endpoints {
        type alto:typed-endpoint-address;
        min-elements 1;
      }
    }
    output {
      container endpoint-property-service {
        uses alto:endpoint-property-map;
      }
    }
  }


  rpc endpoint-cost-service {
    description
      "ReqEndpointCostMap. RFC7285 Sec. 11.5.1.3." +
      " object {
          CostType          cost-type;
          [JSONString       constraints<0..*>;]
          EndpointFilter    endpoints;
        } ReqEndpointCostMap;";
    input {
      container cost-type {
        must "current()";
        uses alto:cost-type;
      }
      leaf-list constraints {
        type alto:constraint;
        description
          "RFC7285 Sec. 11.5.1.3.";
      }
      container endpoints {
        must "current()";
        leaf-list srcs {
          type alto:typed-endpoint-address;
          description
            "Source endpoint addresses.";
        }
        leaf-list dsts {



Shi, et al.               Expires May 14, 2015                 [Page 79]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


          type alto:typed-endpoint-address;
          description
            "Destination endpoint addresses.";
        }
        description
          " EndpointFilter: Endpoint addr. RFC7285 Sec. 11.5.1.3." +
          " object {
              [TypedEndpointAddr srcs<0..*>;]
              [TypedEndpointAddr dsts<0..*>;]
            } EndpointFilter;";
      }
    }
    output {
      container endpoint-cost-service {
        container meta {
          container cost-type {
            uses alto:cost-type;
          }
        }
        list endpoint-cost-map {
          leaf src {
            type alto:typed-endpoint-address;
            description
              "Source endpoint address.";
          }
          key "src";
          list dst-costs {
            leaf dst {
              type alto:typed-endpoint-address;
              description
                "Destination endpoint address.";
            }
            key "dst";
            uses alto:alto-cost {
              description
                "Cost from source to destination.";
            }
            description
              "The list represents the inner part of the cost matrix." +
              "EndpointDstCosts. RFC7285 Sec. 11.5.1.6." +
              " object-map {
                  TypedEndpointAddr -> JSONValue;
                } EndpointDstCosts;";
          }
          description
            "The list represents the outer part of the cost matrix." +
            "EndpointCostMapData. RFC7285 Sec. 11.5.1.6." +
            " object {



Shi, et al.               Expires May 14, 2015                 [Page 80]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


                EndpointCostMapData endpoint-cost-map;
              } InfoResourceEndpointCostMap : ResponseEntityBase;
              object-map {
                TypedEndpointAddr -> EndpointDstCosts;
              } EndpointCostMapData;";
        }
      }
    }
  }
}

A.3.  ALTO/YANG: Data Instances Description

   module alto-service-did {
     yang-version 1;

     namespace "urn:ietf:params:xml:ns:yang:alto-service-did";
     // TODO: replace with IANA namespace when assigned

     prefix "as-did";

     import alto-service-types {
       prefix alto;
     }

     organization "ALTO WG";
     contact "alto@ietf.org";

     description
       "This module defines the data instance descriptions (DID) of a
        semantically equivalent data model for the ALTO services
        defined in RFC7285.";

     revision 2014-11-01 {
       description "Inherit from alto-service-rpc and types.";
     }

     revision 2014-10-24 {
       description "Initial version.";
     }

     /******************************************
       Groupings for ALTO information resource
     *******************************************/

     grouping network-map-data {
       list map {
         key "pid";



Shi, et al.               Expires May 14, 2015                 [Page 81]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


         leaf pid {
           type alto:pid-name;
         }
         uses alto:endpoint-address-group;
       }
     }

     /* Network Map Grouping */
     grouping network-map {
       leaf resource-id {
         type alto:resource-id;
         mandatory true;
       }
       leaf tag {
         type alto:tag-string;
         mandatory true;
       }
       uses network-map-data;
     }

     grouping cost-map-data {
       list map {
         leaf src {
           type alto:pid-name;
         }
         key "src";
         list dst-costs {
           leaf dst {
             type alto:pid-name;
           }
           key "dst";
           uses alto:alto-cost;
         }
       }
     }

     /* Cost Map Grouping */
     grouping cost-map {
       leaf resource-id {
         type alto:resource-id;
         mandatory true;
       }
       leaf tag {
         type alto:tag-string;
         mandatory true;
       }
       container meta {
         must "current()";



Shi, et al.               Expires May 14, 2015                 [Page 82]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


         uses alto:cost-map-meta;
       }
       uses cost-map-data;
     }

     grouping alto-resources {
       container IRD {
         uses alto:IRD;
       }

       container network-maps {
         list network-map {
           key "resource-id";
           uses network-map;
         }
       }

       container cost-maps {
         list cost-map {
           key "resource-id";
           uses cost-map;
         }
       }

       container endpoint-property-map {
         uses alto:endpoint-property-map;
       }
     }

     /****************************************************
        DATA INSTANCES of all ALTO information resources

        unfiltered network-maps, unfiltered cost-maps are all instances
        of resources. IRD is also modeled as data.

        The design uses augment as the basic approach to implement
        inheritance.
      ****************************************************/

     container resources {
       config false;
       uses alto-resources;
     }
   }







Shi, et al.               Expires May 14, 2015                 [Page 83]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


A.4.  ALTO/YANG: NETCONF

module alto-service-netconf {
  yang-version 1;

  namespace "urn:ietf:params:xml:ns:yang:alto-service-netconf";
  // TODO: replace with IANA namespace when assigned

  prefix "alto-netconf";

  import alto-service-types {
    prefix alto;
  }

  import alto-service-did {
    prefix as-did;
  }

  organization "ALTO WG";
  contact "alto@ietf.org";

  description
    "This module defines the netconf version of alto services. This is
    not compliant/interoperable with RFC7285";

  revision 2014-11-01 {
    description "Initial version.";
  }


  /****************************************************
     DATA INSTANCES of all ALTO information resources

     unfiltered network-maps, unfiltered cost-maps are all instances
     of resources. IRD is also modeled as data.

     The design uses augment as the basic approach to implement
     inheritance.
   ****************************************************/

  container resources {
    config false;
    uses as-did:alto-resources;
  }

  /************************************
   * RPCs                             *
   ************************************/



Shi, et al.               Expires May 14, 2015                 [Page 84]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


  rpc endpoint-cost-service {
    description
      "ReqEndpointCostMap. RFC7285 Sec. 11.5.1.3." +
      " object {
          CostType          cost-type;
          [JSONString       constraints<0..*>;]
          EndpointFilter    endpoints;
        } ReqEndpointCostMap;";
    input {
      container cost-type {
        must "current()";
        uses alto:cost-type;
      }
      leaf-list constraints {
        type alto:constraint;
        description
          "RFC7285 Sec. 11.5.1.3.";
      }
      container endpoints {
        must "current()";
        leaf-list srcs {
          type alto:typed-endpoint-address;
          description
            "Source endpoint addresses.";
        }
        leaf-list dsts {
          type alto:typed-endpoint-address;
          description
            "Destination endpoint addresses.";
        }
        description
          " EndpointFilter: Endpoint addr. RFC7285 Sec. 11.5.1.3." +
          " object {
              [TypedEndpointAddr srcs<0..*>;]
              [TypedEndpointAddr dsts<0..*>;]
            } EndpointFilter;";
      }
    }
    output {
      container endpoint-cost-service {
        container meta {
          container cost-type {
            uses alto:cost-type;
          }
        }
        list endpoint-cost-map {
          leaf src {
            type alto:typed-endpoint-address;



Shi, et al.               Expires May 14, 2015                 [Page 85]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


            description
              "Source endpoint address.";
          }
          key "src";
          list dst-costs {
            leaf dst {
              type alto:typed-endpoint-address;
              description
                "Destination endpoint address.";
            }
            key "dst";
            uses alto:alto-cost {
              description
                "Cost from source to destination.";
            }
            description
              "The list represents the inner part of the cost matrix." +
              "EndpointDstCosts. RFC7285 Sec. 11.5.1.6." +
              " object-map {
                  TypedEndpointAddr -> JSONValue;
                } EndpointDstCosts;";
          }
          description
            "The list represents the outer part of the cost matrix." +
            "EndpointCostMapData. RFC7285 Sec. 11.5.1.6." +
            " object {
                EndpointCostMapData endpoint-cost-map;
              } InfoResourceEndpointCostMap : ResponseEntityBase;
              object-map {
                TypedEndpointAddr -> EndpointDstCosts;
              } EndpointCostMapData;";
        }
      }
    }
  }
}

A.5.  ALTO/YANG: RESTCONF

   module alto-service-restconf {
     yang-version 1;

     namespace "urn:ietf:params:xml:ns:yang:alto-service-restconf";
     // TODO: replace with IANA namespace when assigned

     prefix "alto-restconf";

     import alto-service-types {



Shi, et al.               Expires May 14, 2015                 [Page 86]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


       prefix alto;
     }

     import alto-service-did {
       prefix alto-did;
     }

     organization "ALTO WG";
     contact "alto@ietf.org";

     description
       "This module defines a data model for the ALTO services
        using restconf. Note this is not interop with RFC7285.";

     revision 2014-11-01 {
       description "Initial version.";
     }

     /************************************
      * Data Instances                   *
      ************************************/

     container resources {
       config false;
       uses alto-did:alto-resources;
     }

     /************************************
      * RPCs                             *
      ************************************/

     rpc filtered-network-map-service {
       input {
         leaf-list pids {
           must "current()";
           type alto:pid-name;
         }
         leaf-list address-types {
           type alto:endpoint-address-type;
         }
       }
       output {
         container filtered-network-map-service {
           uses alto:network-map;
         }
       }
     }




Shi, et al.               Expires May 14, 2015                 [Page 87]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


     rpc filtered-cost-map-service {
       input {
         container cost-type {
           must "current()";
           uses alto:cost-type;
         }
         leaf-list constraints {
           type alto:constraint;
         }
         container pids {
           leaf-list srcs {
             type alto:pid-name;
           }
           leaf-list dsts {
             type alto:pid-name;
           }
         }
       }
       output {
         container filtered-cost-map-service {
           uses alto:cost-map;
         }
       }
     }

     rpc endpoint-property-service {
       input {
         leaf-list properties {
           type alto:endpoint-property-type;
           min-elements 1;
         }
         leaf-list endpoints {
           type alto:typed-endpoint-address;
           min-elements 1;
         }
       }
       output {
         container endpoint-property-service {
           uses alto:endpoint-property-map;
         }
       }
     }

     rpc endpoint-cost-service {
       input {
         container cost-type {
           must "current()";
           uses alto:cost-type;



Shi, et al.               Expires May 14, 2015                 [Page 88]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


         }
         leaf-list constraints {
           type alto:constraint;
         }
         container endpoints {
           must "current()";
           leaf-list srcs {
             type alto:typed-endpoint-address;
           }
           leaf-list dsts {
             type alto:typed-endpoint-address;
           }
         }
       }
       output {
         container endpoint-cost-service {
           container meta {
             container cost-type {
               uses alto:cost-type;
             }
           }
           list endpoint-cost-map {
             leaf src {
               type alto:typed-endpoint-address;
             }
             key "src";
             list dst-costs {
               leaf dst {
                 type alto:typed-endpoint-address;
               }
               key "dst";
               uses alto:alto-cost;
             }
           }
         }
       }
     }
   }

Appendix B.  YANG-Validated JSON Messages for ALTO Examples

   We established that the YANG validated messages cannot be
   syntactically equivalent to the ALTO protocol messages.  For a
   selection of the examples in the ALTO protocol, we provide the YANG
   validated version of the message for comparison purposes.






Shi, et al.               Expires May 14, 2015                 [Page 89]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


B.1.  IRD Response Example

   The ALTO example of IRD response as specified in Section 9.2.3 of
   [RFC7285].

   {
     "rpc-reply": {
       "-xmlns": "urn:ietf:params:xml:ns:netconf:base:1.0",
       "-message-id": "1",
       "IRD-service": {
         "-xmlns": "urn:ietf:params:xml:ns:yang:alto-service",
         "meta": {
           "cost-types": [
             {
               "cost-type-name": "num-routing",
               "cost-mode": "numerical",
               "cost-metric": "routingcost",
               "description": "My default"
             },
             {
               "cost-type-name": "num-hop",
               "cost-mode": "numerical",
               "cost-metric": "hopcount"
             },
             {
               "cost-type-name": "ord-routing",
               "cost-mode": "ordinal",
               "cost-metric": "routingcost"
             },
             {
               "cost-type-name": "ord-hop",
               "cost-mode": "ordinal",
               "cost-metric": "hopcount"
             }
           ],
           "default-alto-network-map": "my-default-network-map"
         },
         "resources": [
           {
             "resource-id": "my-default-network-map",
             "uri": "http://alto.example.com/networkmap",
             "media-type": "application/alto-networkmap+json"
           },
           {
             "resource-id": "numerical-routing-cost-map",
             "uri": "http://alto.example.com/costmap/num/routingcost",
             "media-type": "application/alto-costmap+json",
             "capabilities": { "cost-type-names": [ "num-routing" ] },



Shi, et al.               Expires May 14, 2015                 [Page 90]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


             "uses": [ "my-default-network-map" ]
           },
           {
             "resource-id": "numerical-hopcount-cost-map",
             "uri": "http://alto.example.com/costmap/num/hopcount",
             "media-type": "application/alto-costmap+json",
             "capabilities": { "cost-type-names": [ "num-hop" ] },
             "uses": [ "my-default-network-map" ]
           },
           {
             "resource-id": "custom-maps-resources",
             "uri": "http://custom.alto.example.com/maps",
             "media-type": "application/alto-directory+json"
           },
           {
             "resource-id": "endpoint-property",
             "uri": "http://alto.example.com/endpointprop/lookup",
             "media-type": "application/alto-endpointprop+json",
             "accepts": "application/alto-endpointpropparams+json",
             "capabilities": {
               "prop-types": [
                 "my-default-network-map.pid",
                 "priv:ietf-example-prop"
               ]
             }
           },
           {
             "resource-id": "endpoint-cost",
             "uri": "http://alto.example.com/endpointcost/lookup",
             "media-type": "application/alto-endpointcost+json",
             "accepts": "application/alto-endpointcostparams+json",
             "capabilities": {
               "cost-constraints": "true",
               "cost-type-names": [
                 "num-routing",
                 "num-hop",
                 "ord-routing",
                 "ord-hop"
               ]
             }
           }
         ]
       }
     }
   }

   The corresponding XML file which is validated by YANG.




Shi, et al.               Expires May 14, 2015                 [Page 91]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   <?xml version="1.0" encoding="UTF-8" ?>
     <rpc-reply xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
       message-id="1">
       <IRD-service xmlns="urn:ietf:params:xml:ns:yang:alto-service">
         <meta>
           <cost-types>
             <cost-type-name>num-routing</cost-type-name>
             <cost-mode>numerical</cost-mode>
             <cost-metric>routingcost</cost-metric>
             <description>My default</description>
           </cost-types>
           <cost-types>
             <cost-type-name>num-hop</cost-type-name>
             <cost-mode>numerical</cost-mode>
             <cost-metric>hopcount</cost-metric>
           </cost-types>
           <cost-types>
             <cost-type-name>ord-routing</cost-type-name>
             <cost-mode>ordinal</cost-mode>
             <cost-metric>routingcost</cost-metric>
           </cost-types>
           <cost-types>
             <cost-type-name>ord-hop</cost-type-name>
             <cost-mode>ordinal</cost-mode>
             <cost-metric>hopcount</cost-metric>
           </cost-types>
           <default-alto-network-map>
             my-default-network-map
           </default-alto-network-map>
         </meta>
         <resources>
           <resource-id>my-default-network-map</resource-id>
           <uri>http://alto.example.com/networkmap</uri>
           <media-type>application/alto-networkmap+json</media-type>
         </resources>
         <resources>
           <resource-id>numerical-routing-cost-map</resource-id>
           <uri>http://alto.example.com/costmap/num/routingcost</uri>
           <media-type>application/alto-costmap+json</media-type>
           <capabilities>
             <cost-type-names>num-routing</cost-type-names>
           </capabilities>
           <uses>my-default-network-map</uses>
         </resources>
         <resources>
           <resource-id>numerical-hopcount-cost-map</resource-id>
           <uri>http://alto.example.com/costmap/num/hopcount</uri>
           <media-type>application/alto-costmap+json</media-type>



Shi, et al.               Expires May 14, 2015                 [Page 92]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


           <capabilities>
             <cost-type-names>num-hop</cost-type-names>
           </capabilities>
           <uses>my-default-network-map</uses>
         </resources>
         <resources>
           <resource-id>custom-maps-resources</resource-id>
           <uri>http://custom.alto.example.com/maps</uri>
           <media-type>application/alto-directory+json</media-type>
         </resources>
         <resources>
           <resource-id>endpoint-property</resource-id>
           <uri>http://alto.example.com/endpointprop/lookup</uri>
           <media-type>application/alto-endpointprop+json</media-type>
           <accepts>application/alto-endpointpropparams+json</accepts>
           <capabilities>
             <prop-types>my-default-network-map.pid</prop-types>
             <prop-types>priv:ietf-example-prop</prop-types>
           </capabilities>
         </resources>
         <resources>
           <resource-id>endpoint-cost</resource-id>
           <uri>http://alto.example.com/endpointcost/lookup</uri>
           <media-type>application/alto-endpointcost+json</media-type>
           <accepts>application/alto-endpointcostparams+json</accepts>
           <capabilities>
             <cost-constraints>true</cost-constraints>
             <cost-type-names>num-routing</cost-type-names>
             <cost-type-names>num-hop</cost-type-names>
             <cost-type-names>ord-routing</cost-type-names>
             <cost-type-names>ord-hop</cost-type-names>
           </capabilities>
         </resources>
       </IRD-service>
     </rpc-reply>

B.2.  Network Map Service Response Example

   The ALTO example of a network map response as specified in
   Section 11.2.1.7 of [RFC7285].











Shi, et al.               Expires May 14, 2015                 [Page 93]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   {
     "rpc-reply": {
       "-xmlns": "urn:ietf:params:xml:ns:netconf:base:1.0",
       "-message-id": 2,
       "network-map-service": {
         "-xmlns": "urn:ietf:params:xml:ns:yang:alto-service",
         "media-type": "application/alto-networkmap+json",
         "meta": {
           "vtag": {
             "resource-id": "my-default-network-map",
             "tag": "da65eca2eb7a10ce8b059740b0b2e3f8eb1d4785"
           }
         },
         "network-map": [
           {
             "pid": "PID1",
             "endpoint-address-group": {
               "address-type": "ipv4",
               "endpoint-prefix": [
                 "192.0.2.0/24",
                 "198.51.100.0/25"
               ]
             }
           },
           {
             "pid": "PID2",
             "endpoint-address-group": {
               "address-type": "ipv4",
               "endpoint-prefix": ["198.51.100.128/25"]
             }
           },
           {
             "pid": "PID3",
             "endpoint-address-group": [
               {
                 "address-type": "ipv4",
                 "endpoint-prefix": ["0.0.0.0/0"]
               },
               {
                 "address-type": "ipv6",
                 "endpoint-prefix": ["::/0"]
               }
             ]
           }
         ]
       }
     }
   }



Shi, et al.               Expires May 14, 2015                 [Page 94]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   The corresponding YANG-validated XML file:

   <?xml version="1.0" encoding="UTF-8" ?>
     <rpc-reply xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
       message-id="2">
       <network-map-service
         xmlns="urn:ietf:params:xml:ns:yang:alto-service">
         <meta>
           <vtag>
             <resource-id>my-default-network-map</resource-id>
             <tag>da65eca2eb7a10ce8b059740b0b2e3f8eb1d4785</tag>
           </vtag>
         </meta>
         <network-map>
           <pid>PID1</pid>
           <endpoint-address-group>
             <address-type>ipv4</address-type>
             <endpoint-prefix>192.0.2.0/24</endpoint-prefix>
             <endpoint-prefix>198.51.100.0/25</endpoint-prefix>
           </endpoint-address-group>
         </network-map>
         <network-map>
           <pid>PID2</pid>
           <endpoint-address-group>
             <address-type>ipv4</address-type>
             <endpoint-prefix>198.51.100.128/25</endpoint-prefix>
           </endpoint-address-group>
         </network-map>
         <network-map>
           <pid>PID3</pid>
           <endpoint-address-group>
             <address-type>ipv4</address-type>
             <endpoint-prefix>0.0.0.0/0</endpoint-prefix>
           </endpoint-address-group>
           <endpoint-address-group>
             <address-type>ipv6</address-type>
             <endpoint-prefix>::/0</endpoint-prefix>
           </endpoint-address-group>
         </network-map>
       </network-map-service>
     </rpc-reply>

B.3.  Filtered Cost Map Response Example

   The ALTO example of a filtered cost map response as specified in
   Section 11.3.2.7 of [RFC7285].





Shi, et al.               Expires May 14, 2015                 [Page 95]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   {
     "rpc-reply": {
       "-xmlns": "urn:ietf:params:xml:ns:netconf:base:1.0",
       "-message-id": 2,
       "filtered-cost-map-service": {
         "-xmlns": "urn:ietf:params:xml:ns:yang:alto-service",
         "meta": {
           "dependent-vtags": {
             "resource-id": "my-default-network-map",
             "tag": "75ed013b3cb58f896e839582504f622838ce670f"
           },
           "cost-type": {
             "cost-mode": "numerical",
             "cost-metric": "routingcost"
           }
         },
         "cost-map": [
           {
             "src": "PID1",
             "dst-costs": [
               {
                 "dst": "PID1",
                 "cost": "0"
               },
               {
                 "dst": "PID2",
                 "cost": "1"
               },
               {
                 "dst": "PID3",
                 "cost": "2"
               }
             ]
           }
         ]
       }
     }
   }

   The corresponding YANG-validated XML file:











Shi, et al.               Expires May 14, 2015                 [Page 96]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   <?xml version="1.0" encoding="UTF-8" ?>
     <rpc-reply xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
       message-id="2">
       <filtered-cost-map-service
         xmlns="urn:ietf:params:xml:ns:yang:alto-service">
         <meta>
           <dependent-vtags>
             <resource-id>my-default-network-map</resource-id>
             <tag>75ed013b3cb58f896e839582504f622838ce670f</tag>
           </dependent-vtags>
           <cost-type>
             <cost-mode>numerical</cost-mode>
             <cost-metric>routingcost</cost-metric>
           </cost-type>
         </meta>
         <cost-map>
           <src>PID1</src>
           <dst-costs>
             <dst>PID1</dst>
             <cost>0</cost>
           </dst-costs>
           <dst-costs>
             <dst>PID2</dst>
             <cost>1</cost>
           </dst-costs>
           <dst-costs>
             <dst>PID3</dst>
             <cost>2</cost>
           </dst-costs>
         </cost-map>
       </filtered-cost-map-service>
     </rpc-reply>

B.4.  Endpoint Property Service Response Example

   The ALTO example of an endpoint property service response as
   specified in Section 11.4.1.7 of [RFC7285].














Shi, et al.               Expires May 14, 2015                 [Page 97]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   {
     "rpc-reply": {
       "-xmlns": "urn:ietf:params:xml:ns:netconf:base:1.0",
       "-message-id": "2",
       "endpoint-property-service": {
         "-xmlns": "urn:ietf:params:xml:ns:yang:alto-service",
         "meta" : {
           "dependent-vtags" : [
             {"resource-id": "my-default-network-map",
               "tag": "7915dc0290c2705481c491a2b4ffbec482b3cf62"
             }
           ]
         },
         "endpoint-properties": [
           {
             "endpoint": "ipv4:192.0.2.34",
             "properties" : [
               {
                 "property-type": "my-default-network-map.pid",
                 "property": "PID1"
               },
               {
                 "property-type": "priv:ietf-example-prop",
                 "property": "1"
               }
             ]
           },
           {
             "endpoint": "ipv4:203.0.113.129",
             "properties": [
               {
                 "property-type": "my-default-network-map.pid",
                 "property": "PID3"
               }
             ]
           }
         ]
       }
     }
   }

   The corresponding YANG-validated XML file:









Shi, et al.               Expires May 14, 2015                 [Page 98]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   <?xml version="1.0" encoding="UTF-8" ?>
     <rpc-reply xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
       message-id="2">
       <endpoint-property-service
         xmlns="urn:ietf:params:xml:ns:yang:alto-service">
         <meta>
           <dependent-vtags>
             <resource-id>my-default-network-map</resource-id>
             <tag>7915dc0290c2705481c491a2b4ffbec482b3cf62</tag>
           </dependent-vtags>
         </meta>
         <endpoint-properties>
           <endpoint>ipv4:192.0.2.34</endpoint>
           <properties>
             <property-type>my-default-network-map.pid</property-type>
             <property>PID1</property>
           </properties>
           <properties>
             <property-type>priv:ietf-example-prop</property-type>
             <property>1</property>
           </properties>
         </endpoint-properties>
         <endpoint-properties>
           <endpoint>ipv4:203.0.113.129</endpoint>
           <properties>
             <property-type>my-default-network-map.pid</property-type>
             <property>PID3</property>
           </properties>
         </endpoint-properties>
       </endpoint-property-service>
     </rpc-reply>

Authors' Addresses

   Xiao Shi
   Yale University
   51 Prospect Street
   New Haven, CT  06511
   USA

   Email: xiao.shi@yale.edu










Shi, et al.               Expires May 14, 2015                 [Page 99]

Internet-Draft YANG Model for Base ALTO Data and Services  November 2014


   Y. Richard Yang
   Yale University
   51 Prospect St
   New Haven  CT
   USA

   Email: yang.r.yang@gmail.com


   Michael Scharf
   Alcatel-Lucent Bell Labs
   Lorenzstrasse 10
   Stuttgart  70435
   Germany

   Email: michael.scharf@alcatel-lucent.com



































Shi, et al.               Expires May 14, 2015                [Page 100]
