module alto-service-netconf {
  yang-version 1;
  
  namespace "urn:ietf:params:xml:ns:yang:alto-service-netconf";
  // TODO: replace with IANA namespace when assigned

  prefix "alto-netconf";

  import alto-service-types {
    prefix alto;
  }

  organization "ALTO WG";
  contact "alto@ietf.org";

  description 
    "This module defines the netconf version of alto services. This is
    not compliant/interoperable with RFC7285";

  revision 2014-11-01 {
    description "Initial version.";
  }

  /******************************************
    Groupings for ALTO information resource
  *******************************************/

  /* Network Map Grouping */
  grouping network-map {
    leaf resource-id {
      type alto:resource-id;
      mandatory true;
    }
    leaf tag {
      type alto:tag-string;
      mandatory true;
    }
    uses alto:network-map-data;
  }

  /* Cost Map Grouping */
  grouping cost-map {
    leaf resource-id {
      type alto:resource-id;
      mandatory true;
    }
    leaf tag {
      type alto:tag-string;
      mandatory true;
    }
    container meta {
      must "current()";
      uses alto:cost-map-meta;
    }
    uses cost-map-data;
  }

  grouping cost-map-data {
    list cost-map {
      key "src dst";
      leaf src {
        type alto:pid-name;
        description
          "Source PID.";
      }
      leaf dst {
        type alto:pid-name;
        description
          "Destination PID.";
      }
      uses alto:alto-cost {
        description
          "Cost from source to destination.";
      }
    }
  }

  /* Endpoint Property Map Grouping */
  grouping endpoint-property-map {
    container meta {
      uses alto:endpoint-property-meta;
    }
    uses endpoint-property-map-data;
  }

  grouping endpoint-property-map-data {
    list endpoint-properties {
      key "endpoint property-type";
      leaf endpoint {
        type alto:typed-endpoint-address;
        mandatory true;
      }
      leaf property-type {
        type alto:endpoint-property-type;
        mandatory true;
      }
      leaf property {
        type alto:endpoint-property-value;
        mandatory true;
      }
    }
  }

  grouping resources-netconf {
    container IRD {
      uses alto:IRD;
    }

    list network-maps {
      key "resource-id";
      uses network-map;
    }

    list cost-maps {
      key "resource-id";
      uses cost-map;
    }

    container endpoint-property-map {
      uses endpoint-property-map;
    }
  }

  /****************************************************
     DATA INSTANCES of all ALTO information resources

     unfiltered network-maps, unfiltered cost-maps are all instances
     of resources. IRD is also modeled as data.

     The design uses augment as the basic approach to implement
     inheritance.
   ****************************************************/

  container resources {
    config false;
    uses resources-netconf;
  }


  /************************************
   * RPCs                             *
   ************************************/

  rpc endpoint-cost-service {
    description
      "ReqEndpointCostMap. RFC7285 Sec. 11.5.1.3." +
      " object {
          CostType          cost-type;
          [JSONString       constraints<0..*>;]
          EndpointFilter    endpoints;
        } ReqEndpointCostMap;";
    input {
      container cost-type {
        must "current()";
        uses alto:cost-type;
      }
      leaf-list constraints {
        type alto:constraint;
        description
          "RFC7285 Sec. 11.5.1.3.";
      }
      container endpoints {
        must "current()";
        leaf-list srcs {
          type alto:typed-endpoint-address;
          description
            "Source endpoint addresses.";
        }
        leaf-list dsts {
          type alto:typed-endpoint-address;
          description
            "Destination endpoint addresses.";
        }
        description
          " EndpointFilter: Endpoint addr. RFC7285 Sec. 11.5.1.3." +
          " object {
              [TypedEndpointAddr srcs<0..*>;]
              [TypedEndpointAddr dsts<0..*>;]
            } EndpointFilter;";
      }
    }
    output {
      container endpoint-cost-service {
        container meta {
          container cost-type {
            uses alto:cost-type;
          }
        }
        list endpoint-cost-map {
          leaf src {
            type alto:typed-endpoint-address;
            description
              "Source endpoint address.";
          }
          key "src";
          list dst-costs {
            leaf dst {
              type alto:typed-endpoint-address;
              description
                "Destination endpoint address.";
            }
            key "dst";
            uses alto:alto-cost {
              description
                "Cost from source to destination.";
            }
            description
              "The list represents the inner part of the cost matrix." +
              "EndpointDstCosts. RFC7285 Sec. 11.5.1.6." +
              " object-map {
                  TypedEndpointAddr -> JSONValue;
                } EndpointDstCosts;";
          }
          description
            "The list represents the outer part of the cost matrix." +
            "EndpointCostMapData. RFC7285 Sec. 11.5.1.6." +
            " object {
                EndpointCostMapData endpoint-cost-map;
              } InfoResourceEndpointCostMap : ResponseEntityBase;
              object-map {
                TypedEndpointAddr -> EndpointDstCosts;
              } EndpointCostMapData;";
        }
      }
    }
  }

}
